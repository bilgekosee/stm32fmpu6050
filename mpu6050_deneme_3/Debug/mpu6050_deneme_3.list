
mpu6050_deneme_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004400  08004400  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004400  08004400  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08004478  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004478  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e57  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000167d  00000000  00000000  00027ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b0  00000000  00000000  00029570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  00029d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175fe  00000000  00000000  0002a430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d11  00000000  00000000  00041a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000831a4  00000000  00000000  0004873f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb8e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002650  00000000  00000000  000cb960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080042ec 	.word	0x080042ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080042ec 	.word	0x080042ec

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f023 030f 	bic.w	r3, r3, #15
 800099c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f043 030c 	orr.w	r3, r3, #12
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80009b8:	7bbb      	ldrb	r3, [r7, #14]
 80009ba:	f043 030c 	orr.w	r3, r3, #12
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2304      	movs	r3, #4
 80009d6:	214e      	movs	r1, #78	; 0x4e
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <lcd_send_cmd+0x5c>)
 80009da:	f001 f929 	bl	8001c30 <HAL_I2C_Master_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000a8 	.word	0x200000a8

080009ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f023 030f 	bic.w	r3, r3, #15
 80009fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	f043 030d 	orr.w	r3, r3, #13
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	f043 0309 	orr.w	r3, r3, #9
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000a18:	7bbb      	ldrb	r3, [r7, #14]
 8000a1a:	f043 030d 	orr.w	r3, r3, #13
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	f043 0309 	orr.w	r3, r3, #9
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a2c:	f107 0208 	add.w	r2, r7, #8
 8000a30:	2364      	movs	r3, #100	; 0x64
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2304      	movs	r3, #4
 8000a36:	214e      	movs	r1, #78	; 0x4e
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <lcd_send_data+0x5c>)
 8000a3a:	f001 f8f9 	bl	8001c30 <HAL_I2C_Master_Transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000a8 	.word	0x200000a8

08000a4c <lcd_clear>:

void lcd_clear (void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff ff9a 	bl	800098c <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	e005      	b.n	8000a6a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000a5e:	2020      	movs	r0, #32
 8000a60:	f7ff ffc4 	bl	80009ec <lcd_send_data>
	for (int i=0; i<100; i++)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b63      	cmp	r3, #99	; 0x63
 8000a6e:	ddf6      	ble.n	8000a5e <lcd_clear+0x12>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <lcd_init>:

void lcd_init (void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000a7c:	2032      	movs	r0, #50	; 0x32
 8000a7e:	f000 fd3f 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a82:	2030      	movs	r0, #48	; 0x30
 8000a84:	f7ff ff82 	bl	800098c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000a88:	2005      	movs	r0, #5
 8000a8a:	f000 fd39 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a8e:	2030      	movs	r0, #48	; 0x30
 8000a90:	f7ff ff7c 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fd33 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a9a:	2030      	movs	r0, #48	; 0x30
 8000a9c:	f7ff ff76 	bl	800098c <lcd_send_cmd>
	HAL_Delay(10);
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f000 fd2d 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000aa6:	2020      	movs	r0, #32
 8000aa8:	f7ff ff70 	bl	800098c <lcd_send_cmd>
	HAL_Delay(10);
 8000aac:	200a      	movs	r0, #10
 8000aae:	f000 fd27 	bl	8001500 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ab2:	2028      	movs	r0, #40	; 0x28
 8000ab4:	f7ff ff6a 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 fd21 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000abe:	2008      	movs	r0, #8
 8000ac0:	f7ff ff64 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f000 fd1b 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff ff5e 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 fd15 	bl	8001500 <HAL_Delay>
	HAL_Delay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fd12 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000adc:	2006      	movs	r0, #6
 8000ade:	f7ff ff55 	bl	800098c <lcd_send_cmd>
	HAL_Delay(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fd0c 	bl	8001500 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f7ff ff4f 	bl	800098c <lcd_send_cmd>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000afa:	e006      	b.n	8000b0a <lcd_send_string+0x18>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff71 	bl	80009ec <lcd_send_data>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f4      	bne.n	8000afc <lcd_send_string+0xa>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// WHO_AM_I kontrol ediyorum

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	2301      	movs	r3, #1
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2301      	movs	r3, #1
 8000b32:	2275      	movs	r2, #117	; 0x75
 8000b34:	21d0      	movs	r1, #208	; 0xd0
 8000b36:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <MPU6050_Init+0xa8>)
 8000b38:	f001 fa72 	bl	8002020 <HAL_I2C_Mem_Read>

	if (check == 104)  // Her şey yolunda giderse 0x68 sensör tarafından döndürülür
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b68      	cmp	r3, #104	; 0x68
 8000b40:	d13b      	bne.n	8000bba <MPU6050_Init+0x9e>
	{
		// sensör uyanır ve Saat 8 MHz'e kadar ayarlanır
		Data = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2301      	movs	r3, #1
 8000b56:	226b      	movs	r2, #107	; 0x6b
 8000b58:	21d0      	movs	r1, #208	; 0xd0
 8000b5a:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <MPU6050_Init+0xa8>)
 8000b5c:	f001 f966 	bl	8001e2c <HAL_I2C_Mem_Write>


		Data = 0x07;
 8000b60:	2307      	movs	r3, #7
 8000b62:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	1dbb      	adds	r3, r7, #6
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	2219      	movs	r2, #25
 8000b76:	21d0      	movs	r1, #208	; 0xd0
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <MPU6050_Init+0xa8>)
 8000b7a:	f001 f957 	bl	8001e2c <HAL_I2C_Mem_Write>


		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	9302      	str	r3, [sp, #8]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	1dbb      	adds	r3, r7, #6
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	221c      	movs	r2, #28
 8000b94:	21d0      	movs	r1, #208	; 0xd0
 8000b96:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <MPU6050_Init+0xa8>)
 8000b98:	f001 f948 	bl	8001e2c <HAL_I2C_Mem_Write>


		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	1dbb      	adds	r3, r7, #6
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	221b      	movs	r2, #27
 8000bb2:	21d0      	movs	r1, #208	; 0xd0
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MPU6050_Init+0xa8>)
 8000bb6:	f001 f939 	bl	8001e2c <HAL_I2C_Mem_Write>
	}

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000a8 	.word	0x200000a8

08000bc8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	463b      	mov	r3, r7
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	223b      	movs	r2, #59	; 0x3b
 8000be0:	21d0      	movs	r1, #208	; 0xd0
 8000be2:	482f      	ldr	r0, [pc, #188]	; (8000ca0 <MPU6050_Read_Accel+0xd8>)
 8000be4:	f001 fa1c 	bl	8002020 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000be8:	783b      	ldrb	r3, [r7, #0]
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	787b      	ldrb	r3, [r7, #1]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MPU6050_Read_Accel+0xdc>)
 8000bf8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000bfa:	78bb      	ldrb	r3, [r7, #2]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <MPU6050_Read_Accel+0xe0>)
 8000c0a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000c0c:	793b      	ldrb	r3, [r7, #4]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	797b      	ldrb	r3, [r7, #5]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MPU6050_Read_Accel+0xe4>)
 8000c1c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MPU6050_Read_Accel+0xdc>)
 8000c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbe5 	bl	80003f4 <__aeabi_i2d>
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MPU6050_Read_Accel+0xe8>)
 8000c30:	f7ff fd74 	bl	800071c <__aeabi_ddiv>
 8000c34:	4603      	mov	r3, r0
 8000c36:	460c      	mov	r4, r1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	f7ff fe56 	bl	80008ec <__aeabi_d2f>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MPU6050_Read_Accel+0xec>)
 8000c44:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MPU6050_Read_Accel+0xe0>)
 8000c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fbd1 	bl	80003f4 <__aeabi_i2d>
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MPU6050_Read_Accel+0xe8>)
 8000c58:	f7ff fd60 	bl	800071c <__aeabi_ddiv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	4618      	mov	r0, r3
 8000c62:	4621      	mov	r1, r4
 8000c64:	f7ff fe42 	bl	80008ec <__aeabi_d2f>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MPU6050_Read_Accel+0xf0>)
 8000c6c:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MPU6050_Read_Accel+0xe4>)
 8000c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fbbd 	bl	80003f4 <__aeabi_i2d>
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MPU6050_Read_Accel+0xe8>)
 8000c80:	f7ff fd4c 	bl	800071c <__aeabi_ddiv>
 8000c84:	4603      	mov	r3, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	f7ff fe2e 	bl	80008ec <__aeabi_d2f>
 8000c90:	4602      	mov	r2, r0
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MPU6050_Read_Accel+0xf4>)
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000fc 	.word	0x200000fc
 8000ca4:	2000008c 	.word	0x2000008c
 8000ca8:	2000008e 	.word	0x2000008e
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	40d00000 	.word	0x40d00000
 8000cb4:	20000158 	.word	0x20000158
 8000cb8:	20000150 	.word	0x20000150
 8000cbc:	2000015c 	.word	0x2000015c

08000cc0 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	9302      	str	r3, [sp, #8]
 8000ccc:	2306      	movs	r3, #6
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2243      	movs	r2, #67	; 0x43
 8000cd8:	21d0      	movs	r1, #208	; 0xd0
 8000cda:	4831      	ldr	r0, [pc, #196]	; (8000da0 <MPU6050_Read_Gyro+0xe0>)
 8000cdc:	f001 f9a0 	bl	8002020 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000ce0:	783b      	ldrb	r3, [r7, #0]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	787b      	ldrb	r3, [r7, #1]
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MPU6050_Read_Gyro+0xe4>)
 8000cf0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000cf2:	78bb      	ldrb	r3, [r7, #2]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <MPU6050_Read_Gyro+0xe8>)
 8000d02:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000d04:	793b      	ldrb	r3, [r7, #4]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	797b      	ldrb	r3, [r7, #5]
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MPU6050_Read_Gyro+0xec>)
 8000d14:	801a      	strh	r2, [r3, #0]



	Gx = Gyro_X_RAW/131.0;
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MPU6050_Read_Gyro+0xe4>)
 8000d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fb69 	bl	80003f4 <__aeabi_i2d>
 8000d22:	a31d      	add	r3, pc, #116	; (adr r3, 8000d98 <MPU6050_Read_Gyro+0xd8>)
 8000d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d28:	f7ff fcf8 	bl	800071c <__aeabi_ddiv>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	460c      	mov	r4, r1
 8000d30:	4618      	mov	r0, r3
 8000d32:	4621      	mov	r1, r4
 8000d34:	f7ff fdda 	bl	80008ec <__aeabi_d2f>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MPU6050_Read_Gyro+0xf0>)
 8000d3c:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MPU6050_Read_Gyro+0xe8>)
 8000d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fb55 	bl	80003f4 <__aeabi_i2d>
 8000d4a:	a313      	add	r3, pc, #76	; (adr r3, 8000d98 <MPU6050_Read_Gyro+0xd8>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f7ff fce4 	bl	800071c <__aeabi_ddiv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	4618      	mov	r0, r3
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	f7ff fdc6 	bl	80008ec <__aeabi_d2f>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MPU6050_Read_Gyro+0xf4>)
 8000d64:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MPU6050_Read_Gyro+0xec>)
 8000d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fb41 	bl	80003f4 <__aeabi_i2d>
 8000d72:	a309      	add	r3, pc, #36	; (adr r3, 8000d98 <MPU6050_Read_Gyro+0xd8>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	f7ff fcd0 	bl	800071c <__aeabi_ddiv>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	460c      	mov	r4, r1
 8000d80:	4618      	mov	r0, r3
 8000d82:	4621      	mov	r1, r4
 8000d84:	f7ff fdb2 	bl	80008ec <__aeabi_d2f>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MPU6050_Read_Gyro+0xf8>)
 8000d8c:	601a      	str	r2, [r3, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40606000 	.word	0x40606000
 8000da0:	200000a8 	.word	0x200000a8
 8000da4:	20000092 	.word	0x20000092
 8000da8:	20000094 	.word	0x20000094
 8000dac:	20000096 	.word	0x20000096
 8000db0:	200000a4 	.word	0x200000a4
 8000db4:	20000154 	.word	0x20000154
 8000db8:	20000160 	.word	0x20000160

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fb3b 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f8d5 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 f975 	bl	80010b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dce:	f000 f917 	bl	8001000 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dd2:	f000 f943 	bl	800105c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000dd6:	f7ff fe4f 	bl	8000a78 <lcd_init>

   MPU6050_Init();
 8000dda:	f7ff fe9f 	bl	8000b1c <MPU6050_Init>

   lcd_send_string ("initialized");
 8000dde:	4855      	ldr	r0, [pc, #340]	; (8000f34 <main+0x178>)
 8000de0:	f7ff fe87 	bl	8000af2 <lcd_send_string>

   HAL_Delay (1000);  // wait for 1 sec
 8000de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de8:	f000 fb8a 	bl	8001500 <HAL_Delay>

   lcd_clear ();
 8000dec:	f7ff fe2e 	bl	8000a4c <lcd_clear>

   lcd_send_cmd (0x80|0x5A);
 8000df0:	20da      	movs	r0, #218	; 0xda
 8000df2:	f7ff fdcb 	bl	800098c <lcd_send_cmd>
   lcd_send_string ("MPU6050");
 8000df6:	4850      	ldr	r0, [pc, #320]	; (8000f38 <main+0x17c>)
 8000df8:	f7ff fe7b 	bl	8000af2 <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 8000dfc:	f7ff fee4 	bl	8000bc8 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8000e00:	f7ff ff5e 	bl	8000cc0 <MPU6050_Read_Gyro>

	  	  lcd_send_cmd (0x80|0x00);
 8000e04:	2080      	movs	r0, #128	; 0x80
 8000e06:	f7ff fdc1 	bl	800098c <lcd_send_cmd>
	  	  lcd_send_string("Ax=");
 8000e0a:	484c      	ldr	r0, [pc, #304]	; (8000f3c <main+0x180>)
 8000e0c:	f7ff fe71 	bl	8000af2 <lcd_send_string>
	  	  printf(buf,"%.2f",Ax);
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <main+0x184>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff faff 	bl	8000418 <__aeabi_f2d>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	1d38      	adds	r0, r7, #4
 8000e20:	461a      	mov	r2, r3
 8000e22:	4623      	mov	r3, r4
 8000e24:	4947      	ldr	r1, [pc, #284]	; (8000f44 <main+0x188>)
 8000e26:	f002 fb73 	bl	8003510 <iprintf>
	  	  lcd_send_string(buf);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe60 	bl	8000af2 <lcd_send_string>
	  	  lcd_send_string("g ");
 8000e32:	4845      	ldr	r0, [pc, #276]	; (8000f48 <main+0x18c>)
 8000e34:	f7ff fe5d 	bl	8000af2 <lcd_send_string>

	  	  lcd_send_cmd (0x80|0x40);
 8000e38:	20c0      	movs	r0, #192	; 0xc0
 8000e3a:	f7ff fda7 	bl	800098c <lcd_send_cmd>
	  	  lcd_send_string("Ay=");
 8000e3e:	4843      	ldr	r0, [pc, #268]	; (8000f4c <main+0x190>)
 8000e40:	f7ff fe57 	bl	8000af2 <lcd_send_string>
	  	  printf(buf,"%.2f",Ay);
 8000e44:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <main+0x194>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fae5 	bl	8000418 <__aeabi_f2d>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460c      	mov	r4, r1
 8000e52:	1d38      	adds	r0, r7, #4
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	493a      	ldr	r1, [pc, #232]	; (8000f44 <main+0x188>)
 8000e5a:	f002 fb59 	bl	8003510 <iprintf>
	  	  lcd_send_string(buf);
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fe46 	bl	8000af2 <lcd_send_string>
	  	  lcd_send_string("g ");
 8000e66:	4838      	ldr	r0, [pc, #224]	; (8000f48 <main+0x18c>)
 8000e68:	f7ff fe43 	bl	8000af2 <lcd_send_string>

	  	  lcd_send_cmd (0x80|0x14);
 8000e6c:	2094      	movs	r0, #148	; 0x94
 8000e6e:	f7ff fd8d 	bl	800098c <lcd_send_cmd>
	  	  lcd_send_string("Az=");
 8000e72:	4838      	ldr	r0, [pc, #224]	; (8000f54 <main+0x198>)
 8000e74:	f7ff fe3d 	bl	8000af2 <lcd_send_string>
	  	  printf(buf,"%.2f",Az);
 8000e78:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <main+0x19c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff facb 	bl	8000418 <__aeabi_f2d>
 8000e82:	4603      	mov	r3, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	1d38      	adds	r0, r7, #4
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	492d      	ldr	r1, [pc, #180]	; (8000f44 <main+0x188>)
 8000e8e:	f002 fb3f 	bl	8003510 <iprintf>
	  	  lcd_send_string(buf);
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe2c 	bl	8000af2 <lcd_send_string>
	  	  lcd_send_string("g ");
 8000e9a:	482b      	ldr	r0, [pc, #172]	; (8000f48 <main+0x18c>)
 8000e9c:	f7ff fe29 	bl	8000af2 <lcd_send_string>

	  	  lcd_send_cmd (0x80|0x0A);
 8000ea0:	208a      	movs	r0, #138	; 0x8a
 8000ea2:	f7ff fd73 	bl	800098c <lcd_send_cmd>
	  	  lcd_send_string("Gx=");
 8000ea6:	482d      	ldr	r0, [pc, #180]	; (8000f5c <main+0x1a0>)
 8000ea8:	f7ff fe23 	bl	8000af2 <lcd_send_string>
	  	  printf(buf,"%.2f",Gx);
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <main+0x1a4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fab1 	bl	8000418 <__aeabi_f2d>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460c      	mov	r4, r1
 8000eba:	1d38      	adds	r0, r7, #4
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	4920      	ldr	r1, [pc, #128]	; (8000f44 <main+0x188>)
 8000ec2:	f002 fb25 	bl	8003510 <iprintf>
	  	  lcd_send_string(buf);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe12 	bl	8000af2 <lcd_send_string>

	  	  lcd_send_cmd (0x80|0x4A);
 8000ece:	20ca      	movs	r0, #202	; 0xca
 8000ed0:	f7ff fd5c 	bl	800098c <lcd_send_cmd>
	  	  lcd_send_string("Gy=");
 8000ed4:	4823      	ldr	r0, [pc, #140]	; (8000f64 <main+0x1a8>)
 8000ed6:	f7ff fe0c 	bl	8000af2 <lcd_send_string>
	  	  printf(buf,"%.2f",Gy);
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <main+0x1ac>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fa9a 	bl	8000418 <__aeabi_f2d>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	1d38      	adds	r0, r7, #4
 8000eea:	461a      	mov	r2, r3
 8000eec:	4623      	mov	r3, r4
 8000eee:	4915      	ldr	r1, [pc, #84]	; (8000f44 <main+0x188>)
 8000ef0:	f002 fb0e 	bl	8003510 <iprintf>
	  	  lcd_send_string(buf);
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fdfb 	bl	8000af2 <lcd_send_string>

	  	  lcd_send_cmd (0x80|0x1E);
 8000efc:	209e      	movs	r0, #158	; 0x9e
 8000efe:	f7ff fd45 	bl	800098c <lcd_send_cmd>
	  	  lcd_send_string("Gz=");
 8000f02:	481a      	ldr	r0, [pc, #104]	; (8000f6c <main+0x1b0>)
 8000f04:	f7ff fdf5 	bl	8000af2 <lcd_send_string>
	  	  printf(buf,"%.2f",Gz);
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <main+0x1b4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fa83 	bl	8000418 <__aeabi_f2d>
 8000f12:	4603      	mov	r3, r0
 8000f14:	460c      	mov	r4, r1
 8000f16:	1d38      	adds	r0, r7, #4
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <main+0x188>)
 8000f1e:	f002 faf7 	bl	8003510 <iprintf>
	  	  lcd_send_string(buf);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fde4 	bl	8000af2 <lcd_send_string>

	  	  HAL_Delay (250);
 8000f2a:	20fa      	movs	r0, #250	; 0xfa
 8000f2c:	f000 fae8 	bl	8001500 <HAL_Delay>
  {
 8000f30:	e764      	b.n	8000dfc <main+0x40>
 8000f32:	bf00      	nop
 8000f34:	08004304 	.word	0x08004304
 8000f38:	08004310 	.word	0x08004310
 8000f3c:	08004318 	.word	0x08004318
 8000f40:	20000158 	.word	0x20000158
 8000f44:	0800431c 	.word	0x0800431c
 8000f48:	08004324 	.word	0x08004324
 8000f4c:	08004328 	.word	0x08004328
 8000f50:	20000150 	.word	0x20000150
 8000f54:	0800432c 	.word	0x0800432c
 8000f58:	2000015c 	.word	0x2000015c
 8000f5c:	08004330 	.word	0x08004330
 8000f60:	200000a4 	.word	0x200000a4
 8000f64:	08004334 	.word	0x08004334
 8000f68:	20000154 	.word	0x20000154
 8000f6c:	08004338 	.word	0x08004338
 8000f70:	20000160 	.word	0x20000160

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b090      	sub	sp, #64	; 0x40
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	2228      	movs	r2, #40	; 0x28
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fabc 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fe6d 	bl	8002c9c <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fc8:	f000 f8a4 	bl	8001114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 f8d8 	bl	800319c <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ff2:	f000 f88f 	bl	8001114 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3740      	adds	r7, #64	; 0x40
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2C1_Init+0x50>)
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <MX_I2C1_Init+0x54>)
 8001008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_I2C1_Init+0x50>)
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_I2C1_Init+0x58>)
 800100e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_I2C1_Init+0x50>)
 800101e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001022:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_I2C1_Init+0x50>)
 800103e:	f000 fcbf 	bl	80019c0 <HAL_I2C_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001048:	f000 f864 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200000a8 	.word	0x200000a8
 8001054:	40005400 	.word	0x40005400
 8001058:	000186a0 	.word	0x000186a0

0800105c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_I2C2_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MX_I2C2_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_I2C2_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <MX_I2C2_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_I2C2_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_I2C2_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_I2C2_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_I2C2_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_I2C2_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_I2C2_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_I2C2_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_I2C2_Init+0x50>)
 800109a:	f000 fc91 	bl	80019c0 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 f836 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000fc 	.word	0x200000fc
 80010b0:	40005800 	.word	0x40005800
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_GPIO_Init+0x58>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <MX_GPIO_Init+0x58>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_GPIO_Init+0x58>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_GPIO_Init+0x58>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <MX_GPIO_Init+0x58>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6193      	str	r3, [r2, #24]
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_GPIO_Init+0x58>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_GPIO_Init+0x58>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <MX_GPIO_Init+0x58>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <MX_GPIO_Init+0x58>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111a:	e7fe      	b.n	800111a <Error_Handler+0x6>

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_MspInit+0x5c>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_MspInit+0x5c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6193      	str	r3, [r2, #24]
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_MspInit+0x5c>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_MspInit+0x5c>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_MspInit+0x5c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_MspInit+0x5c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_MspInit+0x60>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_MspInit+0x60>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000

08001180 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d124      	bne.n	80011ea <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a29      	ldr	r2, [pc, #164]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4821      	ldr	r0, [pc, #132]	; (8001250 <HAL_I2C_MspInit+0xd0>)
 80011cc:	f000 fa9e 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011da:	61d3      	str	r3, [r2, #28]
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011e8:	e029      	b.n	800123e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_I2C_MspInit+0xd4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d124      	bne.n	800123e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_I2C_MspInit+0xcc>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800120c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	4619      	mov	r1, r3
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <HAL_I2C_MspInit+0xd0>)
 8001222:	f000 fa73 	bl	800170c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_I2C_MspInit+0xcc>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_I2C_MspInit+0xcc>)
 800122c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_I2C_MspInit+0xcc>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40005400 	.word	0x40005400
 800124c:	40021000 	.word	0x40021000
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40005800 	.word	0x40005800

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f000 f913 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e00a      	b.n	80012ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012b8:	f3af 8000 	nop.w
 80012bc:	4601      	mov	r1, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	60ba      	str	r2, [r7, #8]
 80012c4:	b2ca      	uxtb	r2, r1
 80012c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dbf0      	blt.n	80012b8 <_read+0x12>
	}

return len;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e009      	b.n	8001306 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbf1      	blt.n	80012f2 <_write+0x12>
	}
	return len;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_close>:

int _close(int file)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133e:	605a      	str	r2, [r3, #4]
	return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <_isatty>:

int _isatty(int file)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	return 1;
 8001354:	2301      	movs	r3, #1
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f002 f880 	bl	80034ac <__errno>
 80013ac:	4602      	mov	r2, r0
 80013ae:	230c      	movs	r3, #12
 80013b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20005000 	.word	0x20005000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000098 	.word	0x20000098
 80013e0:	20000170 	.word	0x20000170

080013e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013f2:	e003      	b.n	80013fc <LoopCopyDataInit>

080013f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013fa:	3104      	adds	r1, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013fc:	480a      	ldr	r0, [pc, #40]	; (8001428 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001400:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001402:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001404:	d3f6      	bcc.n	80013f4 <CopyDataInit>
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001408:	e002      	b.n	8001410 <LoopFillZerobss>

0800140a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800140c:	f842 3b04 	str.w	r3, [r2], #4

08001410 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001412:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001414:	d3f9      	bcc.n	800140a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001416:	f7ff ffe5 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800141a:	f002 f84d 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141e:	f7ff fccd 	bl	8000dbc <main>
  bx lr
 8001422:	4770      	bx	lr
  ldr r3, =_sidata
 8001424:	08004408 	.word	0x08004408
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800142c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001430:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001434:	2000016c 	.word	0x2000016c

08001438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_2_IRQHandler>
	...

0800143c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x28>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x28>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f929 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fe60 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f933 	bl	80016f2 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 f909 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_IncTick+0x1c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_IncTick+0x20>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <HAL_IncTick+0x20>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000164 	.word	0x20000164

080014ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <HAL_GetTick+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000164 	.word	0x20000164

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff fff0 	bl	80014ec <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_Delay+0x40>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffe0 	bl	80014ec <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000008 	.word	0x20000008

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff90 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff49 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff5e 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffb0 	bl	8001660 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b08b      	sub	sp, #44	; 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e127      	b.n	8001970 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001720:	2201      	movs	r2, #1
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8116 	bne.w	800196a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b12      	cmp	r3, #18
 8001744:	d034      	beq.n	80017b0 <HAL_GPIO_Init+0xa4>
 8001746:	2b12      	cmp	r3, #18
 8001748:	d80d      	bhi.n	8001766 <HAL_GPIO_Init+0x5a>
 800174a:	2b02      	cmp	r3, #2
 800174c:	d02b      	beq.n	80017a6 <HAL_GPIO_Init+0x9a>
 800174e:	2b02      	cmp	r3, #2
 8001750:	d804      	bhi.n	800175c <HAL_GPIO_Init+0x50>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d031      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d01c      	beq.n	8001794 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800175a:	e048      	b.n	80017ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800175c:	2b03      	cmp	r3, #3
 800175e:	d043      	beq.n	80017e8 <HAL_GPIO_Init+0xdc>
 8001760:	2b11      	cmp	r3, #17
 8001762:	d01b      	beq.n	800179c <HAL_GPIO_Init+0x90>
          break;
 8001764:	e043      	b.n	80017ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001766:	4a89      	ldr	r2, [pc, #548]	; (800198c <HAL_GPIO_Init+0x280>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d026      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 800176c:	4a87      	ldr	r2, [pc, #540]	; (800198c <HAL_GPIO_Init+0x280>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d806      	bhi.n	8001780 <HAL_GPIO_Init+0x74>
 8001772:	4a87      	ldr	r2, [pc, #540]	; (8001990 <HAL_GPIO_Init+0x284>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d020      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 8001778:	4a86      	ldr	r2, [pc, #536]	; (8001994 <HAL_GPIO_Init+0x288>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01d      	beq.n	80017ba <HAL_GPIO_Init+0xae>
          break;
 800177e:	e036      	b.n	80017ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001780:	4a85      	ldr	r2, [pc, #532]	; (8001998 <HAL_GPIO_Init+0x28c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 8001786:	4a85      	ldr	r2, [pc, #532]	; (800199c <HAL_GPIO_Init+0x290>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d016      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 800178c:	4a84      	ldr	r2, [pc, #528]	; (80019a0 <HAL_GPIO_Init+0x294>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xae>
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e028      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e023      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01e      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e019      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e012      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e008      	b.n	80017ee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d801      	bhi.n	80017f8 <HAL_GPIO_Init+0xec>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	e001      	b.n	80017fc <HAL_GPIO_Init+0xf0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3304      	adds	r3, #4
 80017fc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2bff      	cmp	r3, #255	; 0xff
 8001802:	d802      	bhi.n	800180a <HAL_GPIO_Init+0xfe>
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x104>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	3b08      	subs	r3, #8
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	210f      	movs	r1, #15
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	6a39      	ldr	r1, [r7, #32]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	431a      	orrs	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8096 	beq.w	800196a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_GPIO_Init+0x298>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_GPIO_Init+0x298>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6193      	str	r3, [r2, #24]
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_GPIO_Init+0x298>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001856:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x29c>)
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_GPIO_Init+0x2a0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x19e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x19a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_GPIO_Init+0x2a8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x196>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a48      	ldr	r2, [pc, #288]	; (80019b8 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x192>
 800189a:	2303      	movs	r3, #3
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 800189e:	2304      	movs	r3, #4
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 80018aa:	2300      	movs	r3, #0
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018bc:	493a      	ldr	r1, [pc, #232]	; (80019a8 <HAL_GPIO_Init+0x29c>)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4938      	ldr	r1, [pc, #224]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4933      	ldr	r1, [pc, #204]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	492e      	ldr	r1, [pc, #184]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	4929      	ldr	r1, [pc, #164]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001916:	4013      	ands	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	4924      	ldr	r1, [pc, #144]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	491f      	ldr	r1, [pc, #124]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800193e:	4013      	ands	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	491a      	ldr	r1, [pc, #104]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	43db      	mvns	r3, r3
 8001964:	4915      	ldr	r1, [pc, #84]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001966:	4013      	ands	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	3301      	adds	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	f47f aed0 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 8001980:	bf00      	nop
 8001982:	372c      	adds	r7, #44	; 0x2c
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	10210000 	.word	0x10210000
 8001990:	10110000 	.word	0x10110000
 8001994:	10120000 	.word	0x10120000
 8001998:	10310000 	.word	0x10310000
 800199c:	10320000 	.word	0x10320000
 80019a0:	10220000 	.word	0x10220000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e11f      	b.n	8001c12 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fbca 	bl	8001180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2224      	movs	r2, #36	; 0x24
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a24:	f001 fd10 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8001a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a7b      	ldr	r2, [pc, #492]	; (8001c1c <HAL_I2C_Init+0x25c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d807      	bhi.n	8001a44 <HAL_I2C_Init+0x84>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a7a      	ldr	r2, [pc, #488]	; (8001c20 <HAL_I2C_Init+0x260>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	bf94      	ite	ls
 8001a3c:	2301      	movls	r3, #1
 8001a3e:	2300      	movhi	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e006      	b.n	8001a52 <HAL_I2C_Init+0x92>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a77      	ldr	r2, [pc, #476]	; (8001c24 <HAL_I2C_Init+0x264>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	bf94      	ite	ls
 8001a4c:	2301      	movls	r3, #1
 8001a4e:	2300      	movhi	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0db      	b.n	8001c12 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4a72      	ldr	r2, [pc, #456]	; (8001c28 <HAL_I2C_Init+0x268>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0c9b      	lsrs	r3, r3, #18
 8001a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a64      	ldr	r2, [pc, #400]	; (8001c1c <HAL_I2C_Init+0x25c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d802      	bhi.n	8001a94 <HAL_I2C_Init+0xd4>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	e009      	b.n	8001aa8 <HAL_I2C_Init+0xe8>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a63      	ldr	r2, [pc, #396]	; (8001c2c <HAL_I2C_Init+0x26c>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4956      	ldr	r1, [pc, #344]	; (8001c1c <HAL_I2C_Init+0x25c>)
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d80d      	bhi.n	8001ae4 <HAL_I2C_Init+0x124>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e59      	subs	r1, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	bf38      	it	cc
 8001ae0:	2304      	movcc	r3, #4
 8001ae2:	e04f      	b.n	8001b84 <HAL_I2C_Init+0x1c4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d111      	bne.n	8001b10 <HAL_I2C_Init+0x150>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	440b      	add	r3, r1
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e012      	b.n	8001b36 <HAL_I2C_Init+0x176>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	0099      	lsls	r1, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_Init+0x17e>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e022      	b.n	8001b84 <HAL_I2C_Init+0x1c4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10e      	bne.n	8001b64 <HAL_I2C_Init+0x1a4>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1e58      	subs	r0, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6859      	ldr	r1, [r3, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	440b      	add	r3, r1
 8001b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b62:	e00f      	b.n	8001b84 <HAL_I2C_Init+0x1c4>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	0099      	lsls	r1, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6809      	ldr	r1, [r1, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6911      	ldr	r1, [r2, #16]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	000186a0 	.word	0x000186a0
 8001c20:	001e847f 	.word	0x001e847f
 8001c24:	003d08ff 	.word	0x003d08ff
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	817b      	strh	r3, [r7, #10]
 8001c40:	4613      	mov	r3, r2
 8001c42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fc52 	bl	80014ec <HAL_GetTick>
 8001c48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	f040 80e0 	bne.w	8001e18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4970      	ldr	r1, [pc, #448]	; (8001e24 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fe3e 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e0d3      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2C_Master_Transmit+0x50>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e0cc      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d007      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2221      	movs	r2, #33	; 0x21
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	893a      	ldrh	r2, [r7, #8]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ce8:	8979      	ldrh	r1, [r7, #10]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	6a3a      	ldr	r2, [r7, #32]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fbf8 	bl	80024e4 <I2C_MasterRequestWrite>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e08d      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d14:	e066      	b.n	8001de4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	6a39      	ldr	r1, [r7, #32]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 feb8 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d107      	bne.n	8001d3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06b      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d11b      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0x188>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d017      	beq.n	8001db8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	6a39      	ldr	r1, [r7, #32]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fea8 	bl	8002b12 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d107      	bne.n	8001de0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e01a      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d194      	bne.n	8001d16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	00100002 	.word	0x00100002
 8001e28:	ffff0000 	.word	0xffff0000

08001e2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e46:	f7ff fb51 	bl	80014ec <HAL_GetTick>
 8001e4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	f040 80d9 	bne.w	800200c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2319      	movs	r3, #25
 8001e60:	2201      	movs	r2, #1
 8001e62:	496d      	ldr	r1, [pc, #436]	; (8002018 <HAL_I2C_Mem_Write+0x1ec>)
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fd3d 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e70:	2302      	movs	r3, #2
 8001e72:	e0cc      	b.n	800200e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Mem_Write+0x56>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e0c5      	b.n	800200e <HAL_I2C_Mem_Write+0x1e2>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d007      	beq.n	8001ea8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2221      	movs	r2, #33	; 0x21
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a3a      	ldr	r2, [r7, #32]
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a4d      	ldr	r2, [pc, #308]	; (800201c <HAL_I2C_Mem_Write+0x1f0>)
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eea:	88f8      	ldrh	r0, [r7, #6]
 8001eec:	893a      	ldrh	r2, [r7, #8]
 8001eee:	8979      	ldrh	r1, [r7, #10]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4603      	mov	r3, r0
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb74 	bl	80025e8 <I2C_RequestMemoryWrite>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d052      	beq.n	8001fac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e081      	b.n	800200e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fdbe 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d107      	bne.n	8001f32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06b      	b.n	800200e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d11b      	bne.n	8001fac <HAL_I2C_Mem_Write+0x180>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d017      	beq.n	8001fac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1aa      	bne.n	8001f0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fdaa 	bl	8002b12 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d107      	bne.n	8001fdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e016      	b.n	800200e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	00100002 	.word	0x00100002
 800201c:	ffff0000 	.word	0xffff0000

08002020 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	817b      	strh	r3, [r7, #10]
 8002032:	460b      	mov	r3, r1
 8002034:	813b      	strh	r3, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800203e:	f7ff fa55 	bl	80014ec <HAL_GetTick>
 8002042:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b20      	cmp	r3, #32
 800204e:	f040 823d 	bne.w	80024cc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2319      	movs	r3, #25
 8002058:	2201      	movs	r2, #1
 800205a:	4981      	ldr	r1, [pc, #516]	; (8002260 <HAL_I2C_Mem_Read+0x240>)
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fc41 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002068:	2302      	movs	r3, #2
 800206a:	e230      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_I2C_Mem_Read+0x5a>
 8002076:	2302      	movs	r3, #2
 8002078:	e229      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d007      	beq.n	80020a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2222      	movs	r2, #34	; 0x22
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2240      	movs	r2, #64	; 0x40
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a61      	ldr	r2, [pc, #388]	; (8002264 <HAL_I2C_Mem_Read+0x244>)
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020e2:	88f8      	ldrh	r0, [r7, #6]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	8979      	ldrh	r1, [r7, #10]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4603      	mov	r3, r0
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fb0e 	bl	8002714 <I2C_RequestMemoryRead>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1e5      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	2b00      	cmp	r3, #0
 8002108:	d113      	bne.n	8002132 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e1b9      	b.n	80024a6 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b01      	cmp	r3, #1
 8002138:	d11d      	bne.n	8002176 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002170:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002172:	b662      	cpsie	i
 8002174:	e197      	b.n	80024a6 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	2b02      	cmp	r3, #2
 800217c:	d11d      	bne.n	80021ba <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800218e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021b6:	b662      	cpsie	i
 80021b8:	e175      	b.n	80024a6 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021e0:	e161      	b.n	80024a6 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	f200 811a 	bhi.w	8002420 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d123      	bne.n	800223c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fccb 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e162      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800223a:	e134      	b.n	80024a6 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	2b02      	cmp	r3, #2
 8002242:	d150      	bne.n	80022e6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	2200      	movs	r2, #0
 800224c:	4906      	ldr	r1, [pc, #24]	; (8002268 <HAL_I2C_Mem_Read+0x248>)
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fb48 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e137      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
 800225e:	bf00      	nop
 8002260:	00100002 	.word	0x00100002
 8002264:	ffff0000 	.word	0xffff0000
 8002268:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800226c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022b0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022e4:	e0df      	b.n	80024a6 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	2200      	movs	r2, #0
 80022ee:	497a      	ldr	r1, [pc, #488]	; (80024d8 <HAL_I2C_Mem_Read+0x4b8>)
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 faf7 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0e6      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002344:	4b65      	ldr	r3, [pc, #404]	; (80024dc <HAL_I2C_Mem_Read+0x4bc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	4a65      	ldr	r2, [pc, #404]	; (80024e0 <HAL_I2C_Mem_Read+0x4c0>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	0a1a      	lsrs	r2, r3, #8
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00da      	lsls	r2, r3, #3
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	3b01      	subs	r3, #1
 8002362:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d117      	bne.n	800239a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800238c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e099      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d1da      	bne.n	800235e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ea:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800241e:	e042      	b.n	80024a6 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fbb5 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e04c      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d118      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f47f ae99 	bne.w	80021e2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	00010004 	.word	0x00010004
 80024dc:	20000000 	.word	0x20000000
 80024e0:	14f8b589 	.word	0x14f8b589

080024e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d006      	beq.n	800250e <I2C_MasterRequestWrite+0x2a>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d003      	beq.n	800250e <I2C_MasterRequestWrite+0x2a>
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800250c:	d108      	bne.n	8002520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e00b      	b.n	8002538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	2b12      	cmp	r3, #18
 8002526:	d107      	bne.n	8002538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f9cd 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255e:	d103      	bne.n	8002568 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e035      	b.n	80025d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002574:	d108      	bne.n	8002588 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002584:	611a      	str	r2, [r3, #16]
 8002586:	e01b      	b.n	80025c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002588:	897b      	ldrh	r3, [r7, #10]
 800258a:	11db      	asrs	r3, r3, #7
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0306 	and.w	r3, r3, #6
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f063 030f 	orn	r3, r3, #15
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	490e      	ldr	r1, [pc, #56]	; (80025e0 <I2C_MasterRequestWrite+0xfc>)
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f9f3 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e010      	b.n	80025d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025b6:	897b      	ldrh	r3, [r7, #10]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <I2C_MasterRequestWrite+0x100>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f9e3 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	00010008 	.word	0x00010008
 80025e4:	00010002 	.word	0x00010002

080025e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	2200      	movs	r2, #0
 800261a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f960 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002638:	d103      	bne.n	8002642 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e05f      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	492d      	ldr	r1, [pc, #180]	; (8002710 <I2C_RequestMemoryWrite+0x128>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f998 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e04c      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fa02 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b04      	cmp	r3, #4
 8002698:	d107      	bne.n	80026aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e02b      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b4:	893b      	ldrh	r3, [r7, #8]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e021      	b.n	8002704 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026c0:	893b      	ldrh	r3, [r7, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f9dc 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d107      	bne.n	80026f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e005      	b.n	8002706 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026fa:	893b      	ldrh	r3, [r7, #8]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	00010002 	.word	0x00010002

08002714 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2200      	movs	r2, #0
 8002756:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f8c2 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002774:	d103      	bne.n	800277e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0aa      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	4952      	ldr	r1, [pc, #328]	; (80028e0 <I2C_RequestMemoryRead+0x1cc>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f8fa 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e097      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f964 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d107      	bne.n	80027e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e076      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f0:	893b      	ldrh	r3, [r7, #8]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]
 80027fa:	e021      	b.n	8002840 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	6a39      	ldr	r1, [r7, #32]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f93e 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b04      	cmp	r3, #4
 8002820:	d107      	bne.n	8002832 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e050      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002836:	893b      	ldrh	r3, [r7, #8]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6a39      	ldr	r1, [r7, #32]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f923 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2b04      	cmp	r3, #4
 8002856:	d107      	bne.n	8002868 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e035      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	2200      	movs	r2, #0
 8002884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f82b 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a2:	d103      	bne.n	80028ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e013      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	6a3a      	ldr	r2, [r7, #32]
 80028c4:	4906      	ldr	r1, [pc, #24]	; (80028e0 <I2C_RequestMemoryRead+0x1cc>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f863 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	00010002 	.word	0x00010002

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e025      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d021      	beq.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7fe fdf5 	bl	80014ec <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e023      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x84>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	e00c      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d0b6      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a0:	e051      	b.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d123      	bne.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0204 	orr.w	r2, r3, #4
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e046      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d021      	beq.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fd73 	bl	80014ec <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e020      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10c      	bne.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e00b      	b.n	8002a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	43da      	mvns	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d18d      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a9c:	e02d      	b.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8ce 	bl	8002c40 <I2C_IsAcknowledgeFailed>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02d      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d021      	beq.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7fe fd19 	bl	80014ec <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d116      	bne.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e007      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d1ca      	bne.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b1e:	e02d      	b.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f88d 	bl	8002c40 <I2C_IsAcknowledgeFailed>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e02d      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d021      	beq.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7fe fcd8 	bl	80014ec <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e007      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d1ca      	bne.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba0:	e042      	b.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d119      	bne.n	8002be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e029      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be4:	f7fe fc82 	bl	80014ec <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d302      	bcc.n	8002bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e007      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d1b5      	bne.n	8002ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	d11b      	bne.n	8002c90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0204 	orr.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e26c      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8087 	beq.w	8002dca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cbc:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cc8:	4b8f      	ldr	r3, [pc, #572]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d112      	bne.n	8002cfa <HAL_RCC_OscConfig+0x5e>
 8002cd4:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d10b      	bne.n	8002cfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce2:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d06c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x12c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d168      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e246      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x76>
 8002d04:	4b80      	ldr	r3, [pc, #512]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a7f      	ldr	r2, [pc, #508]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	e02e      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x98>
 8002d1a:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7a      	ldr	r2, [pc, #488]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b78      	ldr	r3, [pc, #480]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a77      	ldr	r2, [pc, #476]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e01d      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0xbc>
 8002d3e:	4b72      	ldr	r3, [pc, #456]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a71      	ldr	r2, [pc, #452]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6e      	ldr	r2, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0xd4>
 8002d58:	4b6b      	ldr	r3, [pc, #428]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6a      	ldr	r2, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b68      	ldr	r3, [pc, #416]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a67      	ldr	r2, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fbb8 	bl	80014ec <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe fbb4 	bl	80014ec <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1fa      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b5d      	ldr	r3, [pc, #372]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe4>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fba4 	bl	80014ec <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe fba0 	bl	80014ec <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1e6      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x10c>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd6:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x18c>
 8002dee:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x176>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1ba      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4939      	ldr	r1, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e03a      	b.n	8002e9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e30:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fb59 	bl	80014ec <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fb55 	bl	80014ec <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e19b      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4927      	ldr	r1, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fb38 	bl	80014ec <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fe fb34 	bl	80014ec <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e17a      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d03a      	beq.n	8002f20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d019      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fb18 	bl	80014ec <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fe fb14 	bl	80014ec <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e15a      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f000 fac6 	bl	8003470 <RCC_Delay>
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe fafe 	bl	80014ec <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef2:	e00f      	b.n	8002f14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fafa 	bl	80014ec <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d908      	bls.n	8002f14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e140      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	42420000 	.word	0x42420000
 8002f10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	4b9e      	ldr	r3, [pc, #632]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e9      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a6 	beq.w	800307a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f32:	4b97      	ldr	r3, [pc, #604]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b94      	ldr	r3, [pc, #592]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a93      	ldr	r2, [pc, #588]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	61d3      	str	r3, [r2, #28]
 8002f4a:	4b91      	ldr	r3, [pc, #580]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b8e      	ldr	r3, [pc, #568]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d118      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f66:	4b8b      	ldr	r3, [pc, #556]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a8a      	ldr	r2, [pc, #552]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f72:	f7fe fabb 	bl	80014ec <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7a:	f7fe fab7 	bl	80014ec <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0fd      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b81      	ldr	r3, [pc, #516]	; (8003194 <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x312>
 8002fa0:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a7a      	ldr	r2, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	e02d      	b.n	800300a <HAL_RCC_OscConfig+0x36e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x334>
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	4b73      	ldr	r3, [pc, #460]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a72      	ldr	r2, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	e01c      	b.n	800300a <HAL_RCC_OscConfig+0x36e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x356>
 8002fd8:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a6c      	ldr	r2, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a69      	ldr	r2, [pc, #420]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6213      	str	r3, [r2, #32]
 8002ff0:	e00b      	b.n	800300a <HAL_RCC_OscConfig+0x36e>
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a66      	ldr	r2, [pc, #408]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a63      	ldr	r2, [pc, #396]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	f023 0304 	bic.w	r3, r3, #4
 8003008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d015      	beq.n	800303e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe fa6b 	bl	80014ec <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe fa67 	bl	80014ec <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	; 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e0ab      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	4b57      	ldr	r3, [pc, #348]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ee      	beq.n	800301a <HAL_RCC_OscConfig+0x37e>
 800303c:	e014      	b.n	8003068 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7fe fa55 	bl	80014ec <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe fa51 	bl	80014ec <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e095      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ee      	bne.n	8003046 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d105      	bne.n	800307a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306e:	4b48      	ldr	r3, [pc, #288]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a47      	ldr	r2, [pc, #284]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003078:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8081 	beq.w	8003186 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b08      	cmp	r3, #8
 800308e:	d061      	beq.n	8003154 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d146      	bne.n	8003126 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003098:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_OscConfig+0x4fc>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe fa25 	bl	80014ec <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fe fa21 	bl	80014ec <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e067      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d108      	bne.n	80030e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	492d      	ldr	r1, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a19      	ldr	r1, [r3, #32]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	430b      	orrs	r3, r1
 80030f2:	4927      	ldr	r1, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x4fc>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe f9f5 	bl	80014ec <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe f9f1 	bl	80014ec <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e037      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x46a>
 8003124:	e02f      	b.n	8003186 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCC_OscConfig+0x4fc>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe f9de 	bl	80014ec <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe f9da 	bl	80014ec <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e020      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x498>
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e013      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_OscConfig+0x4f4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	429a      	cmp	r2, r3
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
 8003198:	42420060 	.word	0x42420060

0800319c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0d0      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b6a      	ldr	r3, [pc, #424]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d910      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 0207 	bic.w	r2, r3, #7
 80031c6:	4965      	ldr	r1, [pc, #404]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b8      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f8:	4b59      	ldr	r3, [pc, #356]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a58      	ldr	r2, [pc, #352]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a52      	ldr	r2, [pc, #328]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800321a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b50      	ldr	r3, [pc, #320]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	494d      	ldr	r1, [pc, #308]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d040      	beq.n	80032bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e07f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e073      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326a:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06b      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4936      	ldr	r1, [pc, #216]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7fe f92e 	bl	80014ec <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe f92a 	bl	80014ec <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e053      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d210      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 0207 	bic.w	r2, r3, #7
 80032d2:	4922      	ldr	r1, [pc, #136]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e032      	b.n	8003352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4916      	ldr	r1, [pc, #88]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	490e      	ldr	r1, [pc, #56]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800332a:	f000 f821 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800332e:	4601      	mov	r1, r0
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	5cd3      	ldrb	r3, [r2, r3]
 800333e:	fa21 f303 	lsr.w	r3, r1, r3
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x1cc>)
 8003344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_ClockConfig+0x1d0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe f88c 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40022000 	.word	0x40022000
 8003360:	40021000 	.word	0x40021000
 8003364:	08004350 	.word	0x08004350
 8003368:	20000000 	.word	0x20000000
 800336c:	20000004 	.word	0x20000004

08003370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	b490      	push	{r4, r7}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003378:	1d3c      	adds	r4, r7, #4
 800337a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800337c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003380:	4b28      	ldr	r3, [pc, #160]	; (8003424 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800339a:	4b23      	ldr	r3, [pc, #140]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x40>
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x46>
 80033ae:	e02d      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033b2:	623b      	str	r3, [r7, #32]
      break;
 80033b4:	e02d      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033c2:	4413      	add	r3, r2
 80033c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	0c5b      	lsrs	r3, r3, #17
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033e2:	4413      	add	r3, r2
 80033e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	4a0f      	ldr	r2, [pc, #60]	; (800342c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033ee:	fb02 f203 	mul.w	r2, r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e004      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	623b      	str	r3, [r7, #32]
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_RCC_GetSysClockFreq+0xbc>)
 800340e:	623b      	str	r3, [r7, #32]
      break;
 8003410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003412:	6a3b      	ldr	r3, [r7, #32]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3728      	adds	r7, #40	; 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc90      	pop	{r4, r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	0800433c 	.word	0x0800433c
 8003424:	0800434c 	.word	0x0800434c
 8003428:	40021000 	.word	0x40021000
 800342c:	007a1200 	.word	0x007a1200
 8003430:	003d0900 	.word	0x003d0900

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <HAL_RCC_GetHCLKFreq+0x10>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000000 	.word	0x20000000

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800344c:	f7ff fff2 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003450:	4601      	mov	r1, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4a03      	ldr	r2, [pc, #12]	; (800346c <HAL_RCC_GetPCLK1Freq+0x24>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	08004360 	.word	0x08004360

08003470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <RCC_Delay+0x34>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <RCC_Delay+0x38>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0a5b      	lsrs	r3, r3, #9
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800348c:	bf00      	nop
  }
  while (Delay --);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	60fa      	str	r2, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <RCC_Delay+0x1c>
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <__errno>:
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <__errno+0x8>)
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	2500      	movs	r5, #0
 80034bc:	4e0c      	ldr	r6, [pc, #48]	; (80034f0 <__libc_init_array+0x38>)
 80034be:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034c0:	1ba4      	subs	r4, r4, r6
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	42a5      	cmp	r5, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	f000 ff10 	bl	80042ec <_init>
 80034cc:	2500      	movs	r5, #0
 80034ce:	4e0a      	ldr	r6, [pc, #40]	; (80034f8 <__libc_init_array+0x40>)
 80034d0:	4c0a      	ldr	r4, [pc, #40]	; (80034fc <__libc_init_array+0x44>)
 80034d2:	1ba4      	subs	r4, r4, r6
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	42a5      	cmp	r5, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034e0:	4798      	blx	r3
 80034e2:	3501      	adds	r5, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ea:	4798      	blx	r3
 80034ec:	3501      	adds	r5, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08004400 	.word	0x08004400
 80034f4:	08004400 	.word	0x08004400
 80034f8:	08004400 	.word	0x08004400
 80034fc:	08004404 	.word	0x08004404

08003500 <memset>:
 8003500:	4603      	mov	r3, r0
 8003502:	4402      	add	r2, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <iprintf>:
 8003510:	b40f      	push	{r0, r1, r2, r3}
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <iprintf+0x2c>)
 8003514:	b513      	push	{r0, r1, r4, lr}
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	b124      	cbz	r4, 8003524 <iprintf+0x14>
 800351a:	69a3      	ldr	r3, [r4, #24]
 800351c:	b913      	cbnz	r3, 8003524 <iprintf+0x14>
 800351e:	4620      	mov	r0, r4
 8003520:	f000 f84e 	bl	80035c0 <__sinit>
 8003524:	ab05      	add	r3, sp, #20
 8003526:	9a04      	ldr	r2, [sp, #16]
 8003528:	68a1      	ldr	r1, [r4, #8]
 800352a:	4620      	mov	r0, r4
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	f000 f953 	bl	80037d8 <_vfiprintf_r>
 8003532:	b002      	add	sp, #8
 8003534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003538:	b004      	add	sp, #16
 800353a:	4770      	bx	lr
 800353c:	2000000c 	.word	0x2000000c

08003540 <std>:
 8003540:	2300      	movs	r3, #0
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	e9c0 3300 	strd	r3, r3, [r0]
 800354a:	6083      	str	r3, [r0, #8]
 800354c:	8181      	strh	r1, [r0, #12]
 800354e:	6643      	str	r3, [r0, #100]	; 0x64
 8003550:	81c2      	strh	r2, [r0, #14]
 8003552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003556:	6183      	str	r3, [r0, #24]
 8003558:	4619      	mov	r1, r3
 800355a:	2208      	movs	r2, #8
 800355c:	305c      	adds	r0, #92	; 0x5c
 800355e:	f7ff ffcf 	bl	8003500 <memset>
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <std+0x38>)
 8003564:	6224      	str	r4, [r4, #32]
 8003566:	6263      	str	r3, [r4, #36]	; 0x24
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <std+0x3c>)
 800356a:	62a3      	str	r3, [r4, #40]	; 0x28
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <std+0x40>)
 800356e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <std+0x44>)
 8003572:	6323      	str	r3, [r4, #48]	; 0x30
 8003574:	bd10      	pop	{r4, pc}
 8003576:	bf00      	nop
 8003578:	08003d35 	.word	0x08003d35
 800357c:	08003d57 	.word	0x08003d57
 8003580:	08003d8f 	.word	0x08003d8f
 8003584:	08003db3 	.word	0x08003db3

08003588 <_cleanup_r>:
 8003588:	4901      	ldr	r1, [pc, #4]	; (8003590 <_cleanup_r+0x8>)
 800358a:	f000 b885 	b.w	8003698 <_fwalk_reent>
 800358e:	bf00      	nop
 8003590:	0800408d 	.word	0x0800408d

08003594 <__sfmoreglue>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	2568      	movs	r5, #104	; 0x68
 8003598:	1e4a      	subs	r2, r1, #1
 800359a:	4355      	muls	r5, r2
 800359c:	460e      	mov	r6, r1
 800359e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035a2:	f000 f897 	bl	80036d4 <_malloc_r>
 80035a6:	4604      	mov	r4, r0
 80035a8:	b140      	cbz	r0, 80035bc <__sfmoreglue+0x28>
 80035aa:	2100      	movs	r1, #0
 80035ac:	e9c0 1600 	strd	r1, r6, [r0]
 80035b0:	300c      	adds	r0, #12
 80035b2:	60a0      	str	r0, [r4, #8]
 80035b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035b8:	f7ff ffa2 	bl	8003500 <memset>
 80035bc:	4620      	mov	r0, r4
 80035be:	bd70      	pop	{r4, r5, r6, pc}

080035c0 <__sinit>:
 80035c0:	6983      	ldr	r3, [r0, #24]
 80035c2:	b510      	push	{r4, lr}
 80035c4:	4604      	mov	r4, r0
 80035c6:	bb33      	cbnz	r3, 8003616 <__sinit+0x56>
 80035c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80035cc:	6503      	str	r3, [r0, #80]	; 0x50
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <__sinit+0x58>)
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <__sinit+0x5c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6282      	str	r2, [r0, #40]	; 0x28
 80035d6:	4298      	cmp	r0, r3
 80035d8:	bf04      	itt	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	6183      	streq	r3, [r0, #24]
 80035de:	f000 f81f 	bl	8003620 <__sfp>
 80035e2:	6060      	str	r0, [r4, #4]
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 f81b 	bl	8003620 <__sfp>
 80035ea:	60a0      	str	r0, [r4, #8]
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 f817 	bl	8003620 <__sfp>
 80035f2:	2200      	movs	r2, #0
 80035f4:	60e0      	str	r0, [r4, #12]
 80035f6:	2104      	movs	r1, #4
 80035f8:	6860      	ldr	r0, [r4, #4]
 80035fa:	f7ff ffa1 	bl	8003540 <std>
 80035fe:	2201      	movs	r2, #1
 8003600:	2109      	movs	r1, #9
 8003602:	68a0      	ldr	r0, [r4, #8]
 8003604:	f7ff ff9c 	bl	8003540 <std>
 8003608:	2202      	movs	r2, #2
 800360a:	2112      	movs	r1, #18
 800360c:	68e0      	ldr	r0, [r4, #12]
 800360e:	f7ff ff97 	bl	8003540 <std>
 8003612:	2301      	movs	r3, #1
 8003614:	61a3      	str	r3, [r4, #24]
 8003616:	bd10      	pop	{r4, pc}
 8003618:	08004368 	.word	0x08004368
 800361c:	08003589 	.word	0x08003589

08003620 <__sfp>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <__sfp+0x70>)
 8003624:	4607      	mov	r7, r0
 8003626:	681e      	ldr	r6, [r3, #0]
 8003628:	69b3      	ldr	r3, [r6, #24]
 800362a:	b913      	cbnz	r3, 8003632 <__sfp+0x12>
 800362c:	4630      	mov	r0, r6
 800362e:	f7ff ffc7 	bl	80035c0 <__sinit>
 8003632:	3648      	adds	r6, #72	; 0x48
 8003634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003638:	3b01      	subs	r3, #1
 800363a:	d503      	bpl.n	8003644 <__sfp+0x24>
 800363c:	6833      	ldr	r3, [r6, #0]
 800363e:	b133      	cbz	r3, 800364e <__sfp+0x2e>
 8003640:	6836      	ldr	r6, [r6, #0]
 8003642:	e7f7      	b.n	8003634 <__sfp+0x14>
 8003644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003648:	b16d      	cbz	r5, 8003666 <__sfp+0x46>
 800364a:	3468      	adds	r4, #104	; 0x68
 800364c:	e7f4      	b.n	8003638 <__sfp+0x18>
 800364e:	2104      	movs	r1, #4
 8003650:	4638      	mov	r0, r7
 8003652:	f7ff ff9f 	bl	8003594 <__sfmoreglue>
 8003656:	6030      	str	r0, [r6, #0]
 8003658:	2800      	cmp	r0, #0
 800365a:	d1f1      	bne.n	8003640 <__sfp+0x20>
 800365c:	230c      	movs	r3, #12
 800365e:	4604      	mov	r4, r0
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4620      	mov	r0, r4
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <__sfp+0x74>)
 8003668:	6665      	str	r5, [r4, #100]	; 0x64
 800366a:	e9c4 5500 	strd	r5, r5, [r4]
 800366e:	60a5      	str	r5, [r4, #8]
 8003670:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003674:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003678:	2208      	movs	r2, #8
 800367a:	4629      	mov	r1, r5
 800367c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003680:	f7ff ff3e 	bl	8003500 <memset>
 8003684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800368c:	e7e9      	b.n	8003662 <__sfp+0x42>
 800368e:	bf00      	nop
 8003690:	08004368 	.word	0x08004368
 8003694:	ffff0001 	.word	0xffff0001

08003698 <_fwalk_reent>:
 8003698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800369c:	4680      	mov	r8, r0
 800369e:	4689      	mov	r9, r1
 80036a0:	2600      	movs	r6, #0
 80036a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036a6:	b914      	cbnz	r4, 80036ae <_fwalk_reent+0x16>
 80036a8:	4630      	mov	r0, r6
 80036aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80036b2:	3f01      	subs	r7, #1
 80036b4:	d501      	bpl.n	80036ba <_fwalk_reent+0x22>
 80036b6:	6824      	ldr	r4, [r4, #0]
 80036b8:	e7f5      	b.n	80036a6 <_fwalk_reent+0xe>
 80036ba:	89ab      	ldrh	r3, [r5, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d907      	bls.n	80036d0 <_fwalk_reent+0x38>
 80036c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036c4:	3301      	adds	r3, #1
 80036c6:	d003      	beq.n	80036d0 <_fwalk_reent+0x38>
 80036c8:	4629      	mov	r1, r5
 80036ca:	4640      	mov	r0, r8
 80036cc:	47c8      	blx	r9
 80036ce:	4306      	orrs	r6, r0
 80036d0:	3568      	adds	r5, #104	; 0x68
 80036d2:	e7ee      	b.n	80036b2 <_fwalk_reent+0x1a>

080036d4 <_malloc_r>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	1ccd      	adds	r5, r1, #3
 80036d8:	f025 0503 	bic.w	r5, r5, #3
 80036dc:	3508      	adds	r5, #8
 80036de:	2d0c      	cmp	r5, #12
 80036e0:	bf38      	it	cc
 80036e2:	250c      	movcc	r5, #12
 80036e4:	2d00      	cmp	r5, #0
 80036e6:	4606      	mov	r6, r0
 80036e8:	db01      	blt.n	80036ee <_malloc_r+0x1a>
 80036ea:	42a9      	cmp	r1, r5
 80036ec:	d903      	bls.n	80036f6 <_malloc_r+0x22>
 80036ee:	230c      	movs	r3, #12
 80036f0:	6033      	str	r3, [r6, #0]
 80036f2:	2000      	movs	r0, #0
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
 80036f6:	f000 fd77 	bl	80041e8 <__malloc_lock>
 80036fa:	4a21      	ldr	r2, [pc, #132]	; (8003780 <_malloc_r+0xac>)
 80036fc:	6814      	ldr	r4, [r2, #0]
 80036fe:	4621      	mov	r1, r4
 8003700:	b991      	cbnz	r1, 8003728 <_malloc_r+0x54>
 8003702:	4c20      	ldr	r4, [pc, #128]	; (8003784 <_malloc_r+0xb0>)
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	b91b      	cbnz	r3, 8003710 <_malloc_r+0x3c>
 8003708:	4630      	mov	r0, r6
 800370a:	f000 fb03 	bl	8003d14 <_sbrk_r>
 800370e:	6020      	str	r0, [r4, #0]
 8003710:	4629      	mov	r1, r5
 8003712:	4630      	mov	r0, r6
 8003714:	f000 fafe 	bl	8003d14 <_sbrk_r>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d124      	bne.n	8003766 <_malloc_r+0x92>
 800371c:	230c      	movs	r3, #12
 800371e:	4630      	mov	r0, r6
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	f000 fd62 	bl	80041ea <__malloc_unlock>
 8003726:	e7e4      	b.n	80036f2 <_malloc_r+0x1e>
 8003728:	680b      	ldr	r3, [r1, #0]
 800372a:	1b5b      	subs	r3, r3, r5
 800372c:	d418      	bmi.n	8003760 <_malloc_r+0x8c>
 800372e:	2b0b      	cmp	r3, #11
 8003730:	d90f      	bls.n	8003752 <_malloc_r+0x7e>
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	18cc      	adds	r4, r1, r3
 8003736:	50cd      	str	r5, [r1, r3]
 8003738:	4630      	mov	r0, r6
 800373a:	f000 fd56 	bl	80041ea <__malloc_unlock>
 800373e:	f104 000b 	add.w	r0, r4, #11
 8003742:	1d23      	adds	r3, r4, #4
 8003744:	f020 0007 	bic.w	r0, r0, #7
 8003748:	1ac3      	subs	r3, r0, r3
 800374a:	d0d3      	beq.n	80036f4 <_malloc_r+0x20>
 800374c:	425a      	negs	r2, r3
 800374e:	50e2      	str	r2, [r4, r3]
 8003750:	e7d0      	b.n	80036f4 <_malloc_r+0x20>
 8003752:	684b      	ldr	r3, [r1, #4]
 8003754:	428c      	cmp	r4, r1
 8003756:	bf16      	itet	ne
 8003758:	6063      	strne	r3, [r4, #4]
 800375a:	6013      	streq	r3, [r2, #0]
 800375c:	460c      	movne	r4, r1
 800375e:	e7eb      	b.n	8003738 <_malloc_r+0x64>
 8003760:	460c      	mov	r4, r1
 8003762:	6849      	ldr	r1, [r1, #4]
 8003764:	e7cc      	b.n	8003700 <_malloc_r+0x2c>
 8003766:	1cc4      	adds	r4, r0, #3
 8003768:	f024 0403 	bic.w	r4, r4, #3
 800376c:	42a0      	cmp	r0, r4
 800376e:	d005      	beq.n	800377c <_malloc_r+0xa8>
 8003770:	1a21      	subs	r1, r4, r0
 8003772:	4630      	mov	r0, r6
 8003774:	f000 face 	bl	8003d14 <_sbrk_r>
 8003778:	3001      	adds	r0, #1
 800377a:	d0cf      	beq.n	800371c <_malloc_r+0x48>
 800377c:	6025      	str	r5, [r4, #0]
 800377e:	e7db      	b.n	8003738 <_malloc_r+0x64>
 8003780:	2000009c 	.word	0x2000009c
 8003784:	200000a0 	.word	0x200000a0

08003788 <__sfputc_r>:
 8003788:	6893      	ldr	r3, [r2, #8]
 800378a:	b410      	push	{r4}
 800378c:	3b01      	subs	r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	6093      	str	r3, [r2, #8]
 8003792:	da07      	bge.n	80037a4 <__sfputc_r+0x1c>
 8003794:	6994      	ldr	r4, [r2, #24]
 8003796:	42a3      	cmp	r3, r4
 8003798:	db01      	blt.n	800379e <__sfputc_r+0x16>
 800379a:	290a      	cmp	r1, #10
 800379c:	d102      	bne.n	80037a4 <__sfputc_r+0x1c>
 800379e:	bc10      	pop	{r4}
 80037a0:	f000 bb0c 	b.w	8003dbc <__swbuf_r>
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	1c58      	adds	r0, r3, #1
 80037a8:	6010      	str	r0, [r2, #0]
 80037aa:	7019      	strb	r1, [r3, #0]
 80037ac:	4608      	mov	r0, r1
 80037ae:	bc10      	pop	{r4}
 80037b0:	4770      	bx	lr

080037b2 <__sfputs_r>:
 80037b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b4:	4606      	mov	r6, r0
 80037b6:	460f      	mov	r7, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	18d5      	adds	r5, r2, r3
 80037bc:	42ac      	cmp	r4, r5
 80037be:	d101      	bne.n	80037c4 <__sfputs_r+0x12>
 80037c0:	2000      	movs	r0, #0
 80037c2:	e007      	b.n	80037d4 <__sfputs_r+0x22>
 80037c4:	463a      	mov	r2, r7
 80037c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ca:	4630      	mov	r0, r6
 80037cc:	f7ff ffdc 	bl	8003788 <__sfputc_r>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d1f3      	bne.n	80037bc <__sfputs_r+0xa>
 80037d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037d8 <_vfiprintf_r>:
 80037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	460c      	mov	r4, r1
 80037de:	b09d      	sub	sp, #116	; 0x74
 80037e0:	4617      	mov	r7, r2
 80037e2:	461d      	mov	r5, r3
 80037e4:	4606      	mov	r6, r0
 80037e6:	b118      	cbz	r0, 80037f0 <_vfiprintf_r+0x18>
 80037e8:	6983      	ldr	r3, [r0, #24]
 80037ea:	b90b      	cbnz	r3, 80037f0 <_vfiprintf_r+0x18>
 80037ec:	f7ff fee8 	bl	80035c0 <__sinit>
 80037f0:	4b7c      	ldr	r3, [pc, #496]	; (80039e4 <_vfiprintf_r+0x20c>)
 80037f2:	429c      	cmp	r4, r3
 80037f4:	d158      	bne.n	80038a8 <_vfiprintf_r+0xd0>
 80037f6:	6874      	ldr	r4, [r6, #4]
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	0718      	lsls	r0, r3, #28
 80037fc:	d55e      	bpl.n	80038bc <_vfiprintf_r+0xe4>
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05b      	beq.n	80038bc <_vfiprintf_r+0xe4>
 8003804:	2300      	movs	r3, #0
 8003806:	9309      	str	r3, [sp, #36]	; 0x24
 8003808:	2320      	movs	r3, #32
 800380a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800380e:	2330      	movs	r3, #48	; 0x30
 8003810:	f04f 0b01 	mov.w	fp, #1
 8003814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003818:	9503      	str	r5, [sp, #12]
 800381a:	46b8      	mov	r8, r7
 800381c:	4645      	mov	r5, r8
 800381e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003822:	b10b      	cbz	r3, 8003828 <_vfiprintf_r+0x50>
 8003824:	2b25      	cmp	r3, #37	; 0x25
 8003826:	d154      	bne.n	80038d2 <_vfiprintf_r+0xfa>
 8003828:	ebb8 0a07 	subs.w	sl, r8, r7
 800382c:	d00b      	beq.n	8003846 <_vfiprintf_r+0x6e>
 800382e:	4653      	mov	r3, sl
 8003830:	463a      	mov	r2, r7
 8003832:	4621      	mov	r1, r4
 8003834:	4630      	mov	r0, r6
 8003836:	f7ff ffbc 	bl	80037b2 <__sfputs_r>
 800383a:	3001      	adds	r0, #1
 800383c:	f000 80c2 	beq.w	80039c4 <_vfiprintf_r+0x1ec>
 8003840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003842:	4453      	add	r3, sl
 8003844:	9309      	str	r3, [sp, #36]	; 0x24
 8003846:	f898 3000 	ldrb.w	r3, [r8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80ba 	beq.w	80039c4 <_vfiprintf_r+0x1ec>
 8003850:	2300      	movs	r3, #0
 8003852:	f04f 32ff 	mov.w	r2, #4294967295
 8003856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800385a:	9304      	str	r3, [sp, #16]
 800385c:	9307      	str	r3, [sp, #28]
 800385e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003862:	931a      	str	r3, [sp, #104]	; 0x68
 8003864:	46a8      	mov	r8, r5
 8003866:	2205      	movs	r2, #5
 8003868:	f818 1b01 	ldrb.w	r1, [r8], #1
 800386c:	485e      	ldr	r0, [pc, #376]	; (80039e8 <_vfiprintf_r+0x210>)
 800386e:	f000 fcad 	bl	80041cc <memchr>
 8003872:	9b04      	ldr	r3, [sp, #16]
 8003874:	bb78      	cbnz	r0, 80038d6 <_vfiprintf_r+0xfe>
 8003876:	06d9      	lsls	r1, r3, #27
 8003878:	bf44      	itt	mi
 800387a:	2220      	movmi	r2, #32
 800387c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003880:	071a      	lsls	r2, r3, #28
 8003882:	bf44      	itt	mi
 8003884:	222b      	movmi	r2, #43	; 0x2b
 8003886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800388a:	782a      	ldrb	r2, [r5, #0]
 800388c:	2a2a      	cmp	r2, #42	; 0x2a
 800388e:	d02a      	beq.n	80038e6 <_vfiprintf_r+0x10e>
 8003890:	46a8      	mov	r8, r5
 8003892:	2000      	movs	r0, #0
 8003894:	250a      	movs	r5, #10
 8003896:	9a07      	ldr	r2, [sp, #28]
 8003898:	4641      	mov	r1, r8
 800389a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800389e:	3b30      	subs	r3, #48	; 0x30
 80038a0:	2b09      	cmp	r3, #9
 80038a2:	d969      	bls.n	8003978 <_vfiprintf_r+0x1a0>
 80038a4:	b360      	cbz	r0, 8003900 <_vfiprintf_r+0x128>
 80038a6:	e024      	b.n	80038f2 <_vfiprintf_r+0x11a>
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <_vfiprintf_r+0x214>)
 80038aa:	429c      	cmp	r4, r3
 80038ac:	d101      	bne.n	80038b2 <_vfiprintf_r+0xda>
 80038ae:	68b4      	ldr	r4, [r6, #8]
 80038b0:	e7a2      	b.n	80037f8 <_vfiprintf_r+0x20>
 80038b2:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <_vfiprintf_r+0x218>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	bf08      	it	eq
 80038b8:	68f4      	ldreq	r4, [r6, #12]
 80038ba:	e79d      	b.n	80037f8 <_vfiprintf_r+0x20>
 80038bc:	4621      	mov	r1, r4
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 fae0 	bl	8003e84 <__swsetup_r>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d09d      	beq.n	8003804 <_vfiprintf_r+0x2c>
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	b01d      	add	sp, #116	; 0x74
 80038ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d2:	46a8      	mov	r8, r5
 80038d4:	e7a2      	b.n	800381c <_vfiprintf_r+0x44>
 80038d6:	4a44      	ldr	r2, [pc, #272]	; (80039e8 <_vfiprintf_r+0x210>)
 80038d8:	4645      	mov	r5, r8
 80038da:	1a80      	subs	r0, r0, r2
 80038dc:	fa0b f000 	lsl.w	r0, fp, r0
 80038e0:	4318      	orrs	r0, r3
 80038e2:	9004      	str	r0, [sp, #16]
 80038e4:	e7be      	b.n	8003864 <_vfiprintf_r+0x8c>
 80038e6:	9a03      	ldr	r2, [sp, #12]
 80038e8:	1d11      	adds	r1, r2, #4
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	9103      	str	r1, [sp, #12]
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	db01      	blt.n	80038f6 <_vfiprintf_r+0x11e>
 80038f2:	9207      	str	r2, [sp, #28]
 80038f4:	e004      	b.n	8003900 <_vfiprintf_r+0x128>
 80038f6:	4252      	negs	r2, r2
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	9207      	str	r2, [sp, #28]
 80038fe:	9304      	str	r3, [sp, #16]
 8003900:	f898 3000 	ldrb.w	r3, [r8]
 8003904:	2b2e      	cmp	r3, #46	; 0x2e
 8003906:	d10e      	bne.n	8003926 <_vfiprintf_r+0x14e>
 8003908:	f898 3001 	ldrb.w	r3, [r8, #1]
 800390c:	2b2a      	cmp	r3, #42	; 0x2a
 800390e:	d138      	bne.n	8003982 <_vfiprintf_r+0x1aa>
 8003910:	9b03      	ldr	r3, [sp, #12]
 8003912:	f108 0802 	add.w	r8, r8, #2
 8003916:	1d1a      	adds	r2, r3, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	9203      	str	r2, [sp, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	bfb8      	it	lt
 8003920:	f04f 33ff 	movlt.w	r3, #4294967295
 8003924:	9305      	str	r3, [sp, #20]
 8003926:	4d33      	ldr	r5, [pc, #204]	; (80039f4 <_vfiprintf_r+0x21c>)
 8003928:	2203      	movs	r2, #3
 800392a:	f898 1000 	ldrb.w	r1, [r8]
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fc4c 	bl	80041cc <memchr>
 8003934:	b140      	cbz	r0, 8003948 <_vfiprintf_r+0x170>
 8003936:	2340      	movs	r3, #64	; 0x40
 8003938:	1b40      	subs	r0, r0, r5
 800393a:	fa03 f000 	lsl.w	r0, r3, r0
 800393e:	9b04      	ldr	r3, [sp, #16]
 8003940:	f108 0801 	add.w	r8, r8, #1
 8003944:	4303      	orrs	r3, r0
 8003946:	9304      	str	r3, [sp, #16]
 8003948:	f898 1000 	ldrb.w	r1, [r8]
 800394c:	2206      	movs	r2, #6
 800394e:	482a      	ldr	r0, [pc, #168]	; (80039f8 <_vfiprintf_r+0x220>)
 8003950:	f108 0701 	add.w	r7, r8, #1
 8003954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003958:	f000 fc38 	bl	80041cc <memchr>
 800395c:	2800      	cmp	r0, #0
 800395e:	d037      	beq.n	80039d0 <_vfiprintf_r+0x1f8>
 8003960:	4b26      	ldr	r3, [pc, #152]	; (80039fc <_vfiprintf_r+0x224>)
 8003962:	bb1b      	cbnz	r3, 80039ac <_vfiprintf_r+0x1d4>
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	3307      	adds	r3, #7
 8003968:	f023 0307 	bic.w	r3, r3, #7
 800396c:	3308      	adds	r3, #8
 800396e:	9303      	str	r3, [sp, #12]
 8003970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003972:	444b      	add	r3, r9
 8003974:	9309      	str	r3, [sp, #36]	; 0x24
 8003976:	e750      	b.n	800381a <_vfiprintf_r+0x42>
 8003978:	fb05 3202 	mla	r2, r5, r2, r3
 800397c:	2001      	movs	r0, #1
 800397e:	4688      	mov	r8, r1
 8003980:	e78a      	b.n	8003898 <_vfiprintf_r+0xc0>
 8003982:	2300      	movs	r3, #0
 8003984:	250a      	movs	r5, #10
 8003986:	4619      	mov	r1, r3
 8003988:	f108 0801 	add.w	r8, r8, #1
 800398c:	9305      	str	r3, [sp, #20]
 800398e:	4640      	mov	r0, r8
 8003990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003994:	3a30      	subs	r2, #48	; 0x30
 8003996:	2a09      	cmp	r2, #9
 8003998:	d903      	bls.n	80039a2 <_vfiprintf_r+0x1ca>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0c3      	beq.n	8003926 <_vfiprintf_r+0x14e>
 800399e:	9105      	str	r1, [sp, #20]
 80039a0:	e7c1      	b.n	8003926 <_vfiprintf_r+0x14e>
 80039a2:	fb05 2101 	mla	r1, r5, r1, r2
 80039a6:	2301      	movs	r3, #1
 80039a8:	4680      	mov	r8, r0
 80039aa:	e7f0      	b.n	800398e <_vfiprintf_r+0x1b6>
 80039ac:	ab03      	add	r3, sp, #12
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4622      	mov	r2, r4
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <_vfiprintf_r+0x228>)
 80039b4:	a904      	add	r1, sp, #16
 80039b6:	4630      	mov	r0, r6
 80039b8:	f3af 8000 	nop.w
 80039bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80039c0:	4681      	mov	r9, r0
 80039c2:	d1d5      	bne.n	8003970 <_vfiprintf_r+0x198>
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	065b      	lsls	r3, r3, #25
 80039c8:	f53f af7e 	bmi.w	80038c8 <_vfiprintf_r+0xf0>
 80039cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ce:	e77d      	b.n	80038cc <_vfiprintf_r+0xf4>
 80039d0:	ab03      	add	r3, sp, #12
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	4622      	mov	r2, r4
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <_vfiprintf_r+0x228>)
 80039d8:	a904      	add	r1, sp, #16
 80039da:	4630      	mov	r0, r6
 80039dc:	f000 f888 	bl	8003af0 <_printf_i>
 80039e0:	e7ec      	b.n	80039bc <_vfiprintf_r+0x1e4>
 80039e2:	bf00      	nop
 80039e4:	0800438c 	.word	0x0800438c
 80039e8:	080043cc 	.word	0x080043cc
 80039ec:	080043ac 	.word	0x080043ac
 80039f0:	0800436c 	.word	0x0800436c
 80039f4:	080043d2 	.word	0x080043d2
 80039f8:	080043d6 	.word	0x080043d6
 80039fc:	00000000 	.word	0x00000000
 8003a00:	080037b3 	.word	0x080037b3

08003a04 <_printf_common>:
 8003a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a08:	4691      	mov	r9, r2
 8003a0a:	461f      	mov	r7, r3
 8003a0c:	688a      	ldr	r2, [r1, #8]
 8003a0e:	690b      	ldr	r3, [r1, #16]
 8003a10:	4606      	mov	r6, r0
 8003a12:	4293      	cmp	r3, r2
 8003a14:	bfb8      	it	lt
 8003a16:	4613      	movlt	r3, r2
 8003a18:	f8c9 3000 	str.w	r3, [r9]
 8003a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a20:	460c      	mov	r4, r1
 8003a22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a26:	b112      	cbz	r2, 8003a2e <_printf_common+0x2a>
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8c9 3000 	str.w	r3, [r9]
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	0699      	lsls	r1, r3, #26
 8003a32:	bf42      	ittt	mi
 8003a34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a38:	3302      	addmi	r3, #2
 8003a3a:	f8c9 3000 	strmi.w	r3, [r9]
 8003a3e:	6825      	ldr	r5, [r4, #0]
 8003a40:	f015 0506 	ands.w	r5, r5, #6
 8003a44:	d107      	bne.n	8003a56 <_printf_common+0x52>
 8003a46:	f104 0a19 	add.w	sl, r4, #25
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	42ab      	cmp	r3, r5
 8003a54:	dc29      	bgt.n	8003aaa <_printf_common+0xa6>
 8003a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	3300      	adds	r3, #0
 8003a5e:	bf18      	it	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	0692      	lsls	r2, r2, #26
 8003a64:	d42e      	bmi.n	8003ac4 <_printf_common+0xc0>
 8003a66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	47c0      	blx	r8
 8003a70:	3001      	adds	r0, #1
 8003a72:	d021      	beq.n	8003ab8 <_printf_common+0xb4>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	68e5      	ldr	r5, [r4, #12]
 8003a78:	f003 0306 	and.w	r3, r3, #6
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	bf18      	it	ne
 8003a80:	2500      	movne	r5, #0
 8003a82:	f8d9 2000 	ldr.w	r2, [r9]
 8003a86:	f04f 0900 	mov.w	r9, #0
 8003a8a:	bf08      	it	eq
 8003a8c:	1aad      	subeq	r5, r5, r2
 8003a8e:	68a3      	ldr	r3, [r4, #8]
 8003a90:	6922      	ldr	r2, [r4, #16]
 8003a92:	bf08      	it	eq
 8003a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bfc4      	itt	gt
 8003a9c:	1a9b      	subgt	r3, r3, r2
 8003a9e:	18ed      	addgt	r5, r5, r3
 8003aa0:	341a      	adds	r4, #26
 8003aa2:	454d      	cmp	r5, r9
 8003aa4:	d11a      	bne.n	8003adc <_printf_common+0xd8>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e008      	b.n	8003abc <_printf_common+0xb8>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4652      	mov	r2, sl
 8003aae:	4639      	mov	r1, r7
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	47c0      	blx	r8
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d103      	bne.n	8003ac0 <_printf_common+0xbc>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac0:	3501      	adds	r5, #1
 8003ac2:	e7c2      	b.n	8003a4a <_printf_common+0x46>
 8003ac4:	2030      	movs	r0, #48	; 0x30
 8003ac6:	18e1      	adds	r1, r4, r3
 8003ac8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ad2:	4422      	add	r2, r4
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ada:	e7c4      	b.n	8003a66 <_printf_common+0x62>
 8003adc:	2301      	movs	r3, #1
 8003ade:	4622      	mov	r2, r4
 8003ae0:	4639      	mov	r1, r7
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	47c0      	blx	r8
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d0e6      	beq.n	8003ab8 <_printf_common+0xb4>
 8003aea:	f109 0901 	add.w	r9, r9, #1
 8003aee:	e7d8      	b.n	8003aa2 <_printf_common+0x9e>

08003af0 <_printf_i>:
 8003af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003af4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003af8:	460c      	mov	r4, r1
 8003afa:	7e09      	ldrb	r1, [r1, #24]
 8003afc:	b085      	sub	sp, #20
 8003afe:	296e      	cmp	r1, #110	; 0x6e
 8003b00:	4617      	mov	r7, r2
 8003b02:	4606      	mov	r6, r0
 8003b04:	4698      	mov	r8, r3
 8003b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b08:	f000 80b3 	beq.w	8003c72 <_printf_i+0x182>
 8003b0c:	d822      	bhi.n	8003b54 <_printf_i+0x64>
 8003b0e:	2963      	cmp	r1, #99	; 0x63
 8003b10:	d036      	beq.n	8003b80 <_printf_i+0x90>
 8003b12:	d80a      	bhi.n	8003b2a <_printf_i+0x3a>
 8003b14:	2900      	cmp	r1, #0
 8003b16:	f000 80b9 	beq.w	8003c8c <_printf_i+0x19c>
 8003b1a:	2958      	cmp	r1, #88	; 0x58
 8003b1c:	f000 8083 	beq.w	8003c26 <_printf_i+0x136>
 8003b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003b28:	e032      	b.n	8003b90 <_printf_i+0xa0>
 8003b2a:	2964      	cmp	r1, #100	; 0x64
 8003b2c:	d001      	beq.n	8003b32 <_printf_i+0x42>
 8003b2e:	2969      	cmp	r1, #105	; 0x69
 8003b30:	d1f6      	bne.n	8003b20 <_printf_i+0x30>
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	6813      	ldr	r3, [r2, #0]
 8003b36:	0605      	lsls	r5, r0, #24
 8003b38:	f103 0104 	add.w	r1, r3, #4
 8003b3c:	d52a      	bpl.n	8003b94 <_printf_i+0xa4>
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6011      	str	r1, [r2, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da03      	bge.n	8003b4e <_printf_i+0x5e>
 8003b46:	222d      	movs	r2, #45	; 0x2d
 8003b48:	425b      	negs	r3, r3
 8003b4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b4e:	486f      	ldr	r0, [pc, #444]	; (8003d0c <_printf_i+0x21c>)
 8003b50:	220a      	movs	r2, #10
 8003b52:	e039      	b.n	8003bc8 <_printf_i+0xd8>
 8003b54:	2973      	cmp	r1, #115	; 0x73
 8003b56:	f000 809d 	beq.w	8003c94 <_printf_i+0x1a4>
 8003b5a:	d808      	bhi.n	8003b6e <_printf_i+0x7e>
 8003b5c:	296f      	cmp	r1, #111	; 0x6f
 8003b5e:	d020      	beq.n	8003ba2 <_printf_i+0xb2>
 8003b60:	2970      	cmp	r1, #112	; 0x70
 8003b62:	d1dd      	bne.n	8003b20 <_printf_i+0x30>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	f043 0320 	orr.w	r3, r3, #32
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	e003      	b.n	8003b76 <_printf_i+0x86>
 8003b6e:	2975      	cmp	r1, #117	; 0x75
 8003b70:	d017      	beq.n	8003ba2 <_printf_i+0xb2>
 8003b72:	2978      	cmp	r1, #120	; 0x78
 8003b74:	d1d4      	bne.n	8003b20 <_printf_i+0x30>
 8003b76:	2378      	movs	r3, #120	; 0x78
 8003b78:	4865      	ldr	r0, [pc, #404]	; (8003d10 <_printf_i+0x220>)
 8003b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b7e:	e055      	b.n	8003c2c <_printf_i+0x13c>
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b86:	1d19      	adds	r1, r3, #4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6011      	str	r1, [r2, #0]
 8003b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b90:	2301      	movs	r3, #1
 8003b92:	e08c      	b.n	8003cae <_printf_i+0x1be>
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b9a:	6011      	str	r1, [r2, #0]
 8003b9c:	bf18      	it	ne
 8003b9e:	b21b      	sxthne	r3, r3
 8003ba0:	e7cf      	b.n	8003b42 <_printf_i+0x52>
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	6825      	ldr	r5, [r4, #0]
 8003ba6:	1d18      	adds	r0, r3, #4
 8003ba8:	6010      	str	r0, [r2, #0]
 8003baa:	0628      	lsls	r0, r5, #24
 8003bac:	d501      	bpl.n	8003bb2 <_printf_i+0xc2>
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	e002      	b.n	8003bb8 <_printf_i+0xc8>
 8003bb2:	0668      	lsls	r0, r5, #25
 8003bb4:	d5fb      	bpl.n	8003bae <_printf_i+0xbe>
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	296f      	cmp	r1, #111	; 0x6f
 8003bba:	bf14      	ite	ne
 8003bbc:	220a      	movne	r2, #10
 8003bbe:	2208      	moveq	r2, #8
 8003bc0:	4852      	ldr	r0, [pc, #328]	; (8003d0c <_printf_i+0x21c>)
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bc8:	6865      	ldr	r5, [r4, #4]
 8003bca:	2d00      	cmp	r5, #0
 8003bcc:	60a5      	str	r5, [r4, #8]
 8003bce:	f2c0 8095 	blt.w	8003cfc <_printf_i+0x20c>
 8003bd2:	6821      	ldr	r1, [r4, #0]
 8003bd4:	f021 0104 	bic.w	r1, r1, #4
 8003bd8:	6021      	str	r1, [r4, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d13d      	bne.n	8003c5a <_printf_i+0x16a>
 8003bde:	2d00      	cmp	r5, #0
 8003be0:	f040 808e 	bne.w	8003d00 <_printf_i+0x210>
 8003be4:	4665      	mov	r5, ip
 8003be6:	2a08      	cmp	r2, #8
 8003be8:	d10b      	bne.n	8003c02 <_printf_i+0x112>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	07db      	lsls	r3, r3, #31
 8003bee:	d508      	bpl.n	8003c02 <_printf_i+0x112>
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	bfde      	ittt	le
 8003bf8:	2330      	movle	r3, #48	; 0x30
 8003bfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c02:	ebac 0305 	sub.w	r3, ip, r5
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	f8cd 8000 	str.w	r8, [sp]
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	aa03      	add	r2, sp, #12
 8003c10:	4621      	mov	r1, r4
 8003c12:	4630      	mov	r0, r6
 8003c14:	f7ff fef6 	bl	8003a04 <_printf_common>
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d14d      	bne.n	8003cb8 <_printf_i+0x1c8>
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	b005      	add	sp, #20
 8003c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c26:	4839      	ldr	r0, [pc, #228]	; (8003d0c <_printf_i+0x21c>)
 8003c28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	6821      	ldr	r1, [r4, #0]
 8003c30:	1d1d      	adds	r5, r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6015      	str	r5, [r2, #0]
 8003c36:	060a      	lsls	r2, r1, #24
 8003c38:	d50b      	bpl.n	8003c52 <_printf_i+0x162>
 8003c3a:	07ca      	lsls	r2, r1, #31
 8003c3c:	bf44      	itt	mi
 8003c3e:	f041 0120 	orrmi.w	r1, r1, #32
 8003c42:	6021      	strmi	r1, [r4, #0]
 8003c44:	b91b      	cbnz	r3, 8003c4e <_printf_i+0x15e>
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	f022 0220 	bic.w	r2, r2, #32
 8003c4c:	6022      	str	r2, [r4, #0]
 8003c4e:	2210      	movs	r2, #16
 8003c50:	e7b7      	b.n	8003bc2 <_printf_i+0xd2>
 8003c52:	064d      	lsls	r5, r1, #25
 8003c54:	bf48      	it	mi
 8003c56:	b29b      	uxthmi	r3, r3
 8003c58:	e7ef      	b.n	8003c3a <_printf_i+0x14a>
 8003c5a:	4665      	mov	r5, ip
 8003c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c60:	fb02 3311 	mls	r3, r2, r1, r3
 8003c64:	5cc3      	ldrb	r3, [r0, r3]
 8003c66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	d1f5      	bne.n	8003c5c <_printf_i+0x16c>
 8003c70:	e7b9      	b.n	8003be6 <_printf_i+0xf6>
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	6825      	ldr	r5, [r4, #0]
 8003c76:	1d18      	adds	r0, r3, #4
 8003c78:	6961      	ldr	r1, [r4, #20]
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	0628      	lsls	r0, r5, #24
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	d501      	bpl.n	8003c86 <_printf_i+0x196>
 8003c82:	6019      	str	r1, [r3, #0]
 8003c84:	e002      	b.n	8003c8c <_printf_i+0x19c>
 8003c86:	066a      	lsls	r2, r5, #25
 8003c88:	d5fb      	bpl.n	8003c82 <_printf_i+0x192>
 8003c8a:	8019      	strh	r1, [r3, #0]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4665      	mov	r5, ip
 8003c90:	6123      	str	r3, [r4, #16]
 8003c92:	e7b9      	b.n	8003c08 <_printf_i+0x118>
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	1d19      	adds	r1, r3, #4
 8003c98:	6011      	str	r1, [r2, #0]
 8003c9a:	681d      	ldr	r5, [r3, #0]
 8003c9c:	6862      	ldr	r2, [r4, #4]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 fa93 	bl	80041cc <memchr>
 8003ca6:	b108      	cbz	r0, 8003cac <_printf_i+0x1bc>
 8003ca8:	1b40      	subs	r0, r0, r5
 8003caa:	6060      	str	r0, [r4, #4]
 8003cac:	6863      	ldr	r3, [r4, #4]
 8003cae:	6123      	str	r3, [r4, #16]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb6:	e7a7      	b.n	8003c08 <_printf_i+0x118>
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	462a      	mov	r2, r5
 8003cbc:	4639      	mov	r1, r7
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	47c0      	blx	r8
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d0aa      	beq.n	8003c1c <_printf_i+0x12c>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	079b      	lsls	r3, r3, #30
 8003cca:	d413      	bmi.n	8003cf4 <_printf_i+0x204>
 8003ccc:	68e0      	ldr	r0, [r4, #12]
 8003cce:	9b03      	ldr	r3, [sp, #12]
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	bfb8      	it	lt
 8003cd4:	4618      	movlt	r0, r3
 8003cd6:	e7a3      	b.n	8003c20 <_printf_i+0x130>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	464a      	mov	r2, r9
 8003cdc:	4639      	mov	r1, r7
 8003cde:	4630      	mov	r0, r6
 8003ce0:	47c0      	blx	r8
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d09a      	beq.n	8003c1c <_printf_i+0x12c>
 8003ce6:	3501      	adds	r5, #1
 8003ce8:	68e3      	ldr	r3, [r4, #12]
 8003cea:	9a03      	ldr	r2, [sp, #12]
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	42ab      	cmp	r3, r5
 8003cf0:	dcf2      	bgt.n	8003cd8 <_printf_i+0x1e8>
 8003cf2:	e7eb      	b.n	8003ccc <_printf_i+0x1dc>
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	f104 0919 	add.w	r9, r4, #25
 8003cfa:	e7f5      	b.n	8003ce8 <_printf_i+0x1f8>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ac      	bne.n	8003c5a <_printf_i+0x16a>
 8003d00:	7803      	ldrb	r3, [r0, #0]
 8003d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d0a:	e76c      	b.n	8003be6 <_printf_i+0xf6>
 8003d0c:	080043dd 	.word	0x080043dd
 8003d10:	080043ee 	.word	0x080043ee

08003d14 <_sbrk_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	2300      	movs	r3, #0
 8003d18:	4c05      	ldr	r4, [pc, #20]	; (8003d30 <_sbrk_r+0x1c>)
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	f7fd fb2a 	bl	8001378 <_sbrk>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_sbrk_r+0x1a>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_sbrk_r+0x1a>
 8003d2c:	602b      	str	r3, [r5, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	20000168 	.word	0x20000168

08003d34 <__sread>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	460c      	mov	r4, r1
 8003d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3c:	f000 faa2 	bl	8004284 <_read_r>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	bfab      	itete	ge
 8003d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d46:	89a3      	ldrhlt	r3, [r4, #12]
 8003d48:	181b      	addge	r3, r3, r0
 8003d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d4e:	bfac      	ite	ge
 8003d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d52:	81a3      	strhlt	r3, [r4, #12]
 8003d54:	bd10      	pop	{r4, pc}

08003d56 <__swrite>:
 8003d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5a:	461f      	mov	r7, r3
 8003d5c:	898b      	ldrh	r3, [r1, #12]
 8003d5e:	4605      	mov	r5, r0
 8003d60:	05db      	lsls	r3, r3, #23
 8003d62:	460c      	mov	r4, r1
 8003d64:	4616      	mov	r6, r2
 8003d66:	d505      	bpl.n	8003d74 <__swrite+0x1e>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d70:	f000 f9b6 	bl	80040e0 <_lseek_r>
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	4632      	mov	r2, r6
 8003d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d7c:	81a3      	strh	r3, [r4, #12]
 8003d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d82:	463b      	mov	r3, r7
 8003d84:	4628      	mov	r0, r5
 8003d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8a:	f000 b869 	b.w	8003e60 <_write_r>

08003d8e <__sseek>:
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	460c      	mov	r4, r1
 8003d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d96:	f000 f9a3 	bl	80040e0 <_lseek_r>
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	bf15      	itete	ne
 8003da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003daa:	81a3      	strheq	r3, [r4, #12]
 8003dac:	bf18      	it	ne
 8003dae:	81a3      	strhne	r3, [r4, #12]
 8003db0:	bd10      	pop	{r4, pc}

08003db2 <__sclose>:
 8003db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db6:	f000 b8d3 	b.w	8003f60 <_close_r>
	...

08003dbc <__swbuf_r>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	460e      	mov	r6, r1
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	b118      	cbz	r0, 8003dce <__swbuf_r+0x12>
 8003dc6:	6983      	ldr	r3, [r0, #24]
 8003dc8:	b90b      	cbnz	r3, 8003dce <__swbuf_r+0x12>
 8003dca:	f7ff fbf9 	bl	80035c0 <__sinit>
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <__swbuf_r+0x98>)
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	d12a      	bne.n	8003e2a <__swbuf_r+0x6e>
 8003dd4:	686c      	ldr	r4, [r5, #4]
 8003dd6:	69a3      	ldr	r3, [r4, #24]
 8003dd8:	60a3      	str	r3, [r4, #8]
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	071a      	lsls	r2, r3, #28
 8003dde:	d52e      	bpl.n	8003e3e <__swbuf_r+0x82>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	b363      	cbz	r3, 8003e3e <__swbuf_r+0x82>
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	b2f6      	uxtb	r6, r6
 8003dea:	1ac0      	subs	r0, r0, r3
 8003dec:	6963      	ldr	r3, [r4, #20]
 8003dee:	4637      	mov	r7, r6
 8003df0:	4283      	cmp	r3, r0
 8003df2:	dc04      	bgt.n	8003dfe <__swbuf_r+0x42>
 8003df4:	4621      	mov	r1, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f948 	bl	800408c <_fflush_r>
 8003dfc:	bb28      	cbnz	r0, 8003e4a <__swbuf_r+0x8e>
 8003dfe:	68a3      	ldr	r3, [r4, #8]
 8003e00:	3001      	adds	r0, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	60a3      	str	r3, [r4, #8]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	6022      	str	r2, [r4, #0]
 8003e0c:	701e      	strb	r6, [r3, #0]
 8003e0e:	6963      	ldr	r3, [r4, #20]
 8003e10:	4283      	cmp	r3, r0
 8003e12:	d004      	beq.n	8003e1e <__swbuf_r+0x62>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	07db      	lsls	r3, r3, #31
 8003e18:	d519      	bpl.n	8003e4e <__swbuf_r+0x92>
 8003e1a:	2e0a      	cmp	r6, #10
 8003e1c:	d117      	bne.n	8003e4e <__swbuf_r+0x92>
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4628      	mov	r0, r5
 8003e22:	f000 f933 	bl	800408c <_fflush_r>
 8003e26:	b190      	cbz	r0, 8003e4e <__swbuf_r+0x92>
 8003e28:	e00f      	b.n	8003e4a <__swbuf_r+0x8e>
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <__swbuf_r+0x9c>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	d101      	bne.n	8003e34 <__swbuf_r+0x78>
 8003e30:	68ac      	ldr	r4, [r5, #8]
 8003e32:	e7d0      	b.n	8003dd6 <__swbuf_r+0x1a>
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <__swbuf_r+0xa0>)
 8003e36:	429c      	cmp	r4, r3
 8003e38:	bf08      	it	eq
 8003e3a:	68ec      	ldreq	r4, [r5, #12]
 8003e3c:	e7cb      	b.n	8003dd6 <__swbuf_r+0x1a>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4628      	mov	r0, r5
 8003e42:	f000 f81f 	bl	8003e84 <__swsetup_r>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d0cc      	beq.n	8003de4 <__swbuf_r+0x28>
 8003e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8003e4e:	4638      	mov	r0, r7
 8003e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e52:	bf00      	nop
 8003e54:	0800438c 	.word	0x0800438c
 8003e58:	080043ac 	.word	0x080043ac
 8003e5c:	0800436c 	.word	0x0800436c

08003e60 <_write_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4605      	mov	r5, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4c05      	ldr	r4, [pc, #20]	; (8003e80 <_write_r+0x20>)
 8003e6c:	6022      	str	r2, [r4, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7fd fa36 	bl	80012e0 <_write>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_write_r+0x1e>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_write_r+0x1e>
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000168 	.word	0x20000168

08003e84 <__swsetup_r>:
 8003e84:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <__swsetup_r+0xcc>)
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	681d      	ldr	r5, [r3, #0]
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	b125      	cbz	r5, 8003e9a <__swsetup_r+0x16>
 8003e90:	69ab      	ldr	r3, [r5, #24]
 8003e92:	b913      	cbnz	r3, 8003e9a <__swsetup_r+0x16>
 8003e94:	4628      	mov	r0, r5
 8003e96:	f7ff fb93 	bl	80035c0 <__sinit>
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <__swsetup_r+0xd0>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	d10f      	bne.n	8003ec0 <__swsetup_r+0x3c>
 8003ea0:	686c      	ldr	r4, [r5, #4]
 8003ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	0715      	lsls	r5, r2, #28
 8003eaa:	d42c      	bmi.n	8003f06 <__swsetup_r+0x82>
 8003eac:	06d0      	lsls	r0, r2, #27
 8003eae:	d411      	bmi.n	8003ed4 <__swsetup_r+0x50>
 8003eb0:	2209      	movs	r2, #9
 8003eb2:	6032      	str	r2, [r6, #0]
 8003eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	e03e      	b.n	8003f3e <__swsetup_r+0xba>
 8003ec0:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <__swsetup_r+0xd4>)
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	d101      	bne.n	8003eca <__swsetup_r+0x46>
 8003ec6:	68ac      	ldr	r4, [r5, #8]
 8003ec8:	e7eb      	b.n	8003ea2 <__swsetup_r+0x1e>
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <__swsetup_r+0xd8>)
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	bf08      	it	eq
 8003ed0:	68ec      	ldreq	r4, [r5, #12]
 8003ed2:	e7e6      	b.n	8003ea2 <__swsetup_r+0x1e>
 8003ed4:	0751      	lsls	r1, r2, #29
 8003ed6:	d512      	bpl.n	8003efe <__swsetup_r+0x7a>
 8003ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eda:	b141      	cbz	r1, 8003eee <__swsetup_r+0x6a>
 8003edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	d002      	beq.n	8003eea <__swsetup_r+0x66>
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f000 f981 	bl	80041ec <_free_r>
 8003eea:	2300      	movs	r3, #0
 8003eec:	6363      	str	r3, [r4, #52]	; 0x34
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	b94b      	cbnz	r3, 8003f1e <__swsetup_r+0x9a>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f14:	d003      	beq.n	8003f1e <__swsetup_r+0x9a>
 8003f16:	4621      	mov	r1, r4
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 f917 	bl	800414c <__smakebuf_r>
 8003f1e:	89a2      	ldrh	r2, [r4, #12]
 8003f20:	f012 0301 	ands.w	r3, r2, #1
 8003f24:	d00c      	beq.n	8003f40 <__swsetup_r+0xbc>
 8003f26:	2300      	movs	r3, #0
 8003f28:	60a3      	str	r3, [r4, #8]
 8003f2a:	6963      	ldr	r3, [r4, #20]
 8003f2c:	425b      	negs	r3, r3
 8003f2e:	61a3      	str	r3, [r4, #24]
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	b953      	cbnz	r3, 8003f4a <__swsetup_r+0xc6>
 8003f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003f3c:	d1ba      	bne.n	8003eb4 <__swsetup_r+0x30>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	0792      	lsls	r2, r2, #30
 8003f42:	bf58      	it	pl
 8003f44:	6963      	ldrpl	r3, [r4, #20]
 8003f46:	60a3      	str	r3, [r4, #8]
 8003f48:	e7f2      	b.n	8003f30 <__swsetup_r+0xac>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e7f7      	b.n	8003f3e <__swsetup_r+0xba>
 8003f4e:	bf00      	nop
 8003f50:	2000000c 	.word	0x2000000c
 8003f54:	0800438c 	.word	0x0800438c
 8003f58:	080043ac 	.word	0x080043ac
 8003f5c:	0800436c 	.word	0x0800436c

08003f60 <_close_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	2300      	movs	r3, #0
 8003f64:	4c05      	ldr	r4, [pc, #20]	; (8003f7c <_close_r+0x1c>)
 8003f66:	4605      	mov	r5, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	f7fd f9d4 	bl	8001318 <_close>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_close_r+0x1a>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_close_r+0x1a>
 8003f78:	602b      	str	r3, [r5, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	20000168 	.word	0x20000168

08003f80 <__sflush_r>:
 8003f80:	898a      	ldrh	r2, [r1, #12]
 8003f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f86:	4605      	mov	r5, r0
 8003f88:	0710      	lsls	r0, r2, #28
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	d458      	bmi.n	8004040 <__sflush_r+0xc0>
 8003f8e:	684b      	ldr	r3, [r1, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dc05      	bgt.n	8003fa0 <__sflush_r+0x20>
 8003f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dc02      	bgt.n	8003fa0 <__sflush_r+0x20>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fa2:	2e00      	cmp	r6, #0
 8003fa4:	d0f9      	beq.n	8003f9a <__sflush_r+0x1a>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fac:	682f      	ldr	r7, [r5, #0]
 8003fae:	6a21      	ldr	r1, [r4, #32]
 8003fb0:	602b      	str	r3, [r5, #0]
 8003fb2:	d032      	beq.n	800401a <__sflush_r+0x9a>
 8003fb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	075a      	lsls	r2, r3, #29
 8003fba:	d505      	bpl.n	8003fc8 <__sflush_r+0x48>
 8003fbc:	6863      	ldr	r3, [r4, #4]
 8003fbe:	1ac0      	subs	r0, r0, r3
 8003fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fc2:	b10b      	cbz	r3, 8003fc8 <__sflush_r+0x48>
 8003fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc6:	1ac0      	subs	r0, r0, r3
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fce:	6a21      	ldr	r1, [r4, #32]
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b0      	blx	r6
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	d106      	bne.n	8003fe8 <__sflush_r+0x68>
 8003fda:	6829      	ldr	r1, [r5, #0]
 8003fdc:	291d      	cmp	r1, #29
 8003fde:	d848      	bhi.n	8004072 <__sflush_r+0xf2>
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <__sflush_r+0x108>)
 8003fe2:	40ca      	lsrs	r2, r1
 8003fe4:	07d6      	lsls	r6, r2, #31
 8003fe6:	d544      	bpl.n	8004072 <__sflush_r+0xf2>
 8003fe8:	2200      	movs	r2, #0
 8003fea:	6062      	str	r2, [r4, #4]
 8003fec:	6922      	ldr	r2, [r4, #16]
 8003fee:	04d9      	lsls	r1, r3, #19
 8003ff0:	6022      	str	r2, [r4, #0]
 8003ff2:	d504      	bpl.n	8003ffe <__sflush_r+0x7e>
 8003ff4:	1c42      	adds	r2, r0, #1
 8003ff6:	d101      	bne.n	8003ffc <__sflush_r+0x7c>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b903      	cbnz	r3, 8003ffe <__sflush_r+0x7e>
 8003ffc:	6560      	str	r0, [r4, #84]	; 0x54
 8003ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004000:	602f      	str	r7, [r5, #0]
 8004002:	2900      	cmp	r1, #0
 8004004:	d0c9      	beq.n	8003f9a <__sflush_r+0x1a>
 8004006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800400a:	4299      	cmp	r1, r3
 800400c:	d002      	beq.n	8004014 <__sflush_r+0x94>
 800400e:	4628      	mov	r0, r5
 8004010:	f000 f8ec 	bl	80041ec <_free_r>
 8004014:	2000      	movs	r0, #0
 8004016:	6360      	str	r0, [r4, #52]	; 0x34
 8004018:	e7c0      	b.n	8003f9c <__sflush_r+0x1c>
 800401a:	2301      	movs	r3, #1
 800401c:	4628      	mov	r0, r5
 800401e:	47b0      	blx	r6
 8004020:	1c41      	adds	r1, r0, #1
 8004022:	d1c8      	bne.n	8003fb6 <__sflush_r+0x36>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0c5      	beq.n	8003fb6 <__sflush_r+0x36>
 800402a:	2b1d      	cmp	r3, #29
 800402c:	d001      	beq.n	8004032 <__sflush_r+0xb2>
 800402e:	2b16      	cmp	r3, #22
 8004030:	d101      	bne.n	8004036 <__sflush_r+0xb6>
 8004032:	602f      	str	r7, [r5, #0]
 8004034:	e7b1      	b.n	8003f9a <__sflush_r+0x1a>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	e7ad      	b.n	8003f9c <__sflush_r+0x1c>
 8004040:	690f      	ldr	r7, [r1, #16]
 8004042:	2f00      	cmp	r7, #0
 8004044:	d0a9      	beq.n	8003f9a <__sflush_r+0x1a>
 8004046:	0793      	lsls	r3, r2, #30
 8004048:	bf18      	it	ne
 800404a:	2300      	movne	r3, #0
 800404c:	680e      	ldr	r6, [r1, #0]
 800404e:	bf08      	it	eq
 8004050:	694b      	ldreq	r3, [r1, #20]
 8004052:	eba6 0807 	sub.w	r8, r6, r7
 8004056:	600f      	str	r7, [r1, #0]
 8004058:	608b      	str	r3, [r1, #8]
 800405a:	f1b8 0f00 	cmp.w	r8, #0
 800405e:	dd9c      	ble.n	8003f9a <__sflush_r+0x1a>
 8004060:	4643      	mov	r3, r8
 8004062:	463a      	mov	r2, r7
 8004064:	6a21      	ldr	r1, [r4, #32]
 8004066:	4628      	mov	r0, r5
 8004068:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800406a:	47b0      	blx	r6
 800406c:	2800      	cmp	r0, #0
 800406e:	dc06      	bgt.n	800407e <__sflush_r+0xfe>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	e78e      	b.n	8003f9c <__sflush_r+0x1c>
 800407e:	4407      	add	r7, r0
 8004080:	eba8 0800 	sub.w	r8, r8, r0
 8004084:	e7e9      	b.n	800405a <__sflush_r+0xda>
 8004086:	bf00      	nop
 8004088:	20400001 	.word	0x20400001

0800408c <_fflush_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	690b      	ldr	r3, [r1, #16]
 8004090:	4605      	mov	r5, r0
 8004092:	460c      	mov	r4, r1
 8004094:	b1db      	cbz	r3, 80040ce <_fflush_r+0x42>
 8004096:	b118      	cbz	r0, 80040a0 <_fflush_r+0x14>
 8004098:	6983      	ldr	r3, [r0, #24]
 800409a:	b90b      	cbnz	r3, 80040a0 <_fflush_r+0x14>
 800409c:	f7ff fa90 	bl	80035c0 <__sinit>
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <_fflush_r+0x48>)
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d109      	bne.n	80040ba <_fflush_r+0x2e>
 80040a6:	686c      	ldr	r4, [r5, #4]
 80040a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ac:	b17b      	cbz	r3, 80040ce <_fflush_r+0x42>
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040b6:	f7ff bf63 	b.w	8003f80 <__sflush_r>
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <_fflush_r+0x4c>)
 80040bc:	429c      	cmp	r4, r3
 80040be:	d101      	bne.n	80040c4 <_fflush_r+0x38>
 80040c0:	68ac      	ldr	r4, [r5, #8]
 80040c2:	e7f1      	b.n	80040a8 <_fflush_r+0x1c>
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <_fflush_r+0x50>)
 80040c6:	429c      	cmp	r4, r3
 80040c8:	bf08      	it	eq
 80040ca:	68ec      	ldreq	r4, [r5, #12]
 80040cc:	e7ec      	b.n	80040a8 <_fflush_r+0x1c>
 80040ce:	2000      	movs	r0, #0
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
 80040d2:	bf00      	nop
 80040d4:	0800438c 	.word	0x0800438c
 80040d8:	080043ac 	.word	0x080043ac
 80040dc:	0800436c 	.word	0x0800436c

080040e0 <_lseek_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4605      	mov	r5, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	2200      	movs	r2, #0
 80040ea:	4c05      	ldr	r4, [pc, #20]	; (8004100 <_lseek_r+0x20>)
 80040ec:	6022      	str	r2, [r4, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fd f936 	bl	8001360 <_lseek>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_lseek_r+0x1e>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_lseek_r+0x1e>
 80040fc:	602b      	str	r3, [r5, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	20000168 	.word	0x20000168

08004104 <__swhatbuf_r>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	460e      	mov	r6, r1
 8004108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800410c:	b096      	sub	sp, #88	; 0x58
 800410e:	2900      	cmp	r1, #0
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	da07      	bge.n	8004126 <__swhatbuf_r+0x22>
 8004116:	2300      	movs	r3, #0
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	89b3      	ldrh	r3, [r6, #12]
 800411c:	061a      	lsls	r2, r3, #24
 800411e:	d410      	bmi.n	8004142 <__swhatbuf_r+0x3e>
 8004120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004124:	e00e      	b.n	8004144 <__swhatbuf_r+0x40>
 8004126:	466a      	mov	r2, sp
 8004128:	f000 f8be 	bl	80042a8 <_fstat_r>
 800412c:	2800      	cmp	r0, #0
 800412e:	dbf2      	blt.n	8004116 <__swhatbuf_r+0x12>
 8004130:	9a01      	ldr	r2, [sp, #4]
 8004132:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004136:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800413a:	425a      	negs	r2, r3
 800413c:	415a      	adcs	r2, r3
 800413e:	602a      	str	r2, [r5, #0]
 8004140:	e7ee      	b.n	8004120 <__swhatbuf_r+0x1c>
 8004142:	2340      	movs	r3, #64	; 0x40
 8004144:	2000      	movs	r0, #0
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	b016      	add	sp, #88	; 0x58
 800414a:	bd70      	pop	{r4, r5, r6, pc}

0800414c <__smakebuf_r>:
 800414c:	898b      	ldrh	r3, [r1, #12]
 800414e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004150:	079d      	lsls	r5, r3, #30
 8004152:	4606      	mov	r6, r0
 8004154:	460c      	mov	r4, r1
 8004156:	d507      	bpl.n	8004168 <__smakebuf_r+0x1c>
 8004158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	6123      	str	r3, [r4, #16]
 8004160:	2301      	movs	r3, #1
 8004162:	6163      	str	r3, [r4, #20]
 8004164:	b002      	add	sp, #8
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	ab01      	add	r3, sp, #4
 800416a:	466a      	mov	r2, sp
 800416c:	f7ff ffca 	bl	8004104 <__swhatbuf_r>
 8004170:	9900      	ldr	r1, [sp, #0]
 8004172:	4605      	mov	r5, r0
 8004174:	4630      	mov	r0, r6
 8004176:	f7ff faad 	bl	80036d4 <_malloc_r>
 800417a:	b948      	cbnz	r0, 8004190 <__smakebuf_r+0x44>
 800417c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004180:	059a      	lsls	r2, r3, #22
 8004182:	d4ef      	bmi.n	8004164 <__smakebuf_r+0x18>
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	f043 0302 	orr.w	r3, r3, #2
 800418c:	81a3      	strh	r3, [r4, #12]
 800418e:	e7e3      	b.n	8004158 <__smakebuf_r+0xc>
 8004190:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <__smakebuf_r+0x7c>)
 8004192:	62b3      	str	r3, [r6, #40]	; 0x28
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	6020      	str	r0, [r4, #0]
 8004198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419c:	81a3      	strh	r3, [r4, #12]
 800419e:	9b00      	ldr	r3, [sp, #0]
 80041a0:	6120      	str	r0, [r4, #16]
 80041a2:	6163      	str	r3, [r4, #20]
 80041a4:	9b01      	ldr	r3, [sp, #4]
 80041a6:	b15b      	cbz	r3, 80041c0 <__smakebuf_r+0x74>
 80041a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f88d 	bl	80042cc <_isatty_r>
 80041b2:	b128      	cbz	r0, 80041c0 <__smakebuf_r+0x74>
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	f023 0303 	bic.w	r3, r3, #3
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	81a3      	strh	r3, [r4, #12]
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	431d      	orrs	r5, r3
 80041c4:	81a5      	strh	r5, [r4, #12]
 80041c6:	e7cd      	b.n	8004164 <__smakebuf_r+0x18>
 80041c8:	08003589 	.word	0x08003589

080041cc <memchr>:
 80041cc:	b510      	push	{r4, lr}
 80041ce:	b2c9      	uxtb	r1, r1
 80041d0:	4402      	add	r2, r0
 80041d2:	4290      	cmp	r0, r2
 80041d4:	4603      	mov	r3, r0
 80041d6:	d101      	bne.n	80041dc <memchr+0x10>
 80041d8:	2300      	movs	r3, #0
 80041da:	e003      	b.n	80041e4 <memchr+0x18>
 80041dc:	781c      	ldrb	r4, [r3, #0]
 80041de:	3001      	adds	r0, #1
 80041e0:	428c      	cmp	r4, r1
 80041e2:	d1f6      	bne.n	80041d2 <memchr+0x6>
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd10      	pop	{r4, pc}

080041e8 <__malloc_lock>:
 80041e8:	4770      	bx	lr

080041ea <__malloc_unlock>:
 80041ea:	4770      	bx	lr

080041ec <_free_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4605      	mov	r5, r0
 80041f0:	2900      	cmp	r1, #0
 80041f2:	d043      	beq.n	800427c <_free_r+0x90>
 80041f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f8:	1f0c      	subs	r4, r1, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bfb8      	it	lt
 80041fe:	18e4      	addlt	r4, r4, r3
 8004200:	f7ff fff2 	bl	80041e8 <__malloc_lock>
 8004204:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <_free_r+0x94>)
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	4610      	mov	r0, r2
 800420a:	b933      	cbnz	r3, 800421a <_free_r+0x2e>
 800420c:	6063      	str	r3, [r4, #4]
 800420e:	6014      	str	r4, [r2, #0]
 8004210:	4628      	mov	r0, r5
 8004212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004216:	f7ff bfe8 	b.w	80041ea <__malloc_unlock>
 800421a:	42a3      	cmp	r3, r4
 800421c:	d90b      	bls.n	8004236 <_free_r+0x4a>
 800421e:	6821      	ldr	r1, [r4, #0]
 8004220:	1862      	adds	r2, r4, r1
 8004222:	4293      	cmp	r3, r2
 8004224:	bf01      	itttt	eq
 8004226:	681a      	ldreq	r2, [r3, #0]
 8004228:	685b      	ldreq	r3, [r3, #4]
 800422a:	1852      	addeq	r2, r2, r1
 800422c:	6022      	streq	r2, [r4, #0]
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6004      	str	r4, [r0, #0]
 8004232:	e7ed      	b.n	8004210 <_free_r+0x24>
 8004234:	4613      	mov	r3, r2
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	b10a      	cbz	r2, 800423e <_free_r+0x52>
 800423a:	42a2      	cmp	r2, r4
 800423c:	d9fa      	bls.n	8004234 <_free_r+0x48>
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	1858      	adds	r0, r3, r1
 8004242:	42a0      	cmp	r0, r4
 8004244:	d10b      	bne.n	800425e <_free_r+0x72>
 8004246:	6820      	ldr	r0, [r4, #0]
 8004248:	4401      	add	r1, r0
 800424a:	1858      	adds	r0, r3, r1
 800424c:	4282      	cmp	r2, r0
 800424e:	6019      	str	r1, [r3, #0]
 8004250:	d1de      	bne.n	8004210 <_free_r+0x24>
 8004252:	6810      	ldr	r0, [r2, #0]
 8004254:	6852      	ldr	r2, [r2, #4]
 8004256:	4401      	add	r1, r0
 8004258:	6019      	str	r1, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	e7d8      	b.n	8004210 <_free_r+0x24>
 800425e:	d902      	bls.n	8004266 <_free_r+0x7a>
 8004260:	230c      	movs	r3, #12
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	e7d4      	b.n	8004210 <_free_r+0x24>
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	1821      	adds	r1, r4, r0
 800426a:	428a      	cmp	r2, r1
 800426c:	bf01      	itttt	eq
 800426e:	6811      	ldreq	r1, [r2, #0]
 8004270:	6852      	ldreq	r2, [r2, #4]
 8004272:	1809      	addeq	r1, r1, r0
 8004274:	6021      	streq	r1, [r4, #0]
 8004276:	6062      	str	r2, [r4, #4]
 8004278:	605c      	str	r4, [r3, #4]
 800427a:	e7c9      	b.n	8004210 <_free_r+0x24>
 800427c:	bd38      	pop	{r3, r4, r5, pc}
 800427e:	bf00      	nop
 8004280:	2000009c 	.word	0x2000009c

08004284 <_read_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4605      	mov	r5, r0
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	2200      	movs	r2, #0
 800428e:	4c05      	ldr	r4, [pc, #20]	; (80042a4 <_read_r+0x20>)
 8004290:	6022      	str	r2, [r4, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f7fd f807 	bl	80012a6 <_read>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_read_r+0x1e>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_read_r+0x1e>
 80042a0:	602b      	str	r3, [r5, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000168 	.word	0x20000168

080042a8 <_fstat_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	2300      	movs	r3, #0
 80042ac:	4c06      	ldr	r4, [pc, #24]	; (80042c8 <_fstat_r+0x20>)
 80042ae:	4605      	mov	r5, r0
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	f7fd f83a 	bl	800132e <_fstat>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	d102      	bne.n	80042c4 <_fstat_r+0x1c>
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	b103      	cbz	r3, 80042c4 <_fstat_r+0x1c>
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	bd38      	pop	{r3, r4, r5, pc}
 80042c6:	bf00      	nop
 80042c8:	20000168 	.word	0x20000168

080042cc <_isatty_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	2300      	movs	r3, #0
 80042d0:	4c05      	ldr	r4, [pc, #20]	; (80042e8 <_isatty_r+0x1c>)
 80042d2:	4605      	mov	r5, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	f7fd f838 	bl	800134c <_isatty>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_isatty_r+0x1a>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_isatty_r+0x1a>
 80042e4:	602b      	str	r3, [r5, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	20000168 	.word	0x20000168

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
